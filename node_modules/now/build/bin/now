#!/usr/bin/env node
'use strict';

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _path = require('path');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _crossSpawn = require('cross-spawn');

var _nodeVersion = require('node-version');

var _nodeVersion2 = _interopRequireDefault(_nodeVersion);

var _checkUpdate = require('../lib/check-update');

var _checkUpdate2 = _interopRequireDefault(_checkUpdate);

var _error = require('../lib/error');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ours


// Native
if (_nodeVersion2.default.major < 6) {
  (0, _error.error)('Now requires at least version 6 of Node. Please upgrade!');
  process.exit(1);
}

// Packages


var argv = (0, _minimist2.default)(process.argv.slice(2));

// options
var debug = argv.debug || argv.d;

// Disable updates by default
var update = false;

// auto-update checking
// only for the npm version, not the enclosed one
if (!process.pkg) {
  update = (0, _checkUpdate2.default)({ debug: debug });
}

var exit = function exit(code) {
  if (update) {
    update.then(function () {
      return process.exit(code);
    });
  }
  // don't wait for updates more than a second
  // when the process really wants to exit
  setTimeout(function () {
    return process.exit(code);
  }, 1000);
};

var defaultCommand = 'deploy';

var commands = new _set2.default([defaultCommand, 'help', 'list', 'ls', 'rm', 'remove', 'alias', 'aliases', 'ln', 'domain', 'domains', 'dns', 'cert', 'certs', 'secret', 'secrets']);

var aliases = new _map2.default([['ls', 'list'], ['rm', 'remove'], ['ln', 'alias'], ['aliases', 'alias'], ['domain', 'domains'], ['cert', 'certs'], ['secret', 'secrets']]);

var cmd = defaultCommand;
var args = process.argv.slice(2);
var index = args.findIndex(function (a) {
  return commands.has(a);
});

if (index > -1) {
  cmd = args[index];
  args.splice(index, 1);

  if (cmd === 'help') {
    if (index < args.length && commands.has(args[index])) {
      cmd = args[index];
      args.splice(index, 1);
    } else {
      cmd = defaultCommand;
    }

    args.unshift('--help');
  }

  cmd = aliases.get(cmd) || cmd;
}

var bin = (0, _path.resolve)(__dirname, 'now-' + cmd);
if (process.pkg) {
  args.unshift('--entrypoint', bin);
  bin = process.execPath;
}

var proc = (0, _crossSpawn.spawn)(bin, args, {
  stdio: 'inherit',
  customFds: [0, 1, 2]
});

proc.on('close', function (code) {
  return exit(code);
});
proc.on('error', function () {
  return exit(1);
});