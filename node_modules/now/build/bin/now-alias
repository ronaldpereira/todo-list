#!/usr/bin/env node
'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var run = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(token) {
    var _this = this;

    var alias, args, _ret;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            alias = new _alias3.default(apiUrl, token, { debug: debug });
            args = argv._.slice(1);
            return _context3.delegateYield(_regenerator2.default.mark(function _callee2() {
              var start_, list, urls, aliases, current, header, text, elapsed_, _target, err, _aliases, _alias, _err, confirmation, start, elapsed;

              return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.t0 = subcommand;
                      _context2.next = _context2.t0 === 'list' ? 3 : _context2.t0 === 'ls' ? 3 : _context2.t0 === 'remove' ? 22 : _context2.t0 === 'rm' ? 22 : _context2.t0 === 'add' ? 55 : _context2.t0 === 'set' ? 55 : 61;
                      break;

                    case 3:
                      if (!(args.length !== 0)) {
                        _context2.next = 6;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now alias ls`'));
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 6:
                      start_ = new Date();
                      _context2.next = 9;
                      return alias.list();

                    case 9:
                      list = _context2.sent;
                      urls = new _map2.default(list.map(function (l) {
                        return [l.uid, l.url];
                      }));
                      _context2.next = 13;
                      return alias.ls();

                    case 13:
                      aliases = _context2.sent;

                      aliases.sort(function (a, b) {
                        return new Date(b.created) - new Date(a.created);
                      });
                      current = new Date();
                      header = [['', 'id', 'source', 'url', 'created'].map(function (s) {
                        return _chalk2.default.dim(s);
                      })];
                      text = list.length === 0 ? null : (0, _textTable2.default)(header.concat(aliases.map(function (_alias) {
                        var _url = _chalk2.default.underline('https://' + _alias.alias);
                        var target = _alias.deploymentId;
                        var _sourceUrl = urls.get(target) ? _chalk2.default.underline('https://' + urls.get(target)) : _chalk2.default.gray('<null>');

                        var time = _chalk2.default.gray((0, _ms2.default)(current - new Date(_alias.created)) + ' ago');
                        return ['',
                        // we default to `''` because some early aliases didn't
                        // have an uid associated
                        _alias.uid === null ? '' : _alias.uid, _sourceUrl, _url, time];
                      })), { align: ['l', 'r', 'l', 'l'], hsep: ' '.repeat(2), stringLength: _strlen2.default });
                      elapsed_ = (0, _ms2.default)(new Date() - start_);

                      console.log('> ' + aliases.length + ' alias' + (aliases.length === 1 ? '' : 'es') + ' found ' + _chalk2.default.gray('[' + elapsed_ + ']'));

                      if (text) {
                        console.log('\n' + text + '\n');
                      }

                      return _context2.abrupt('break', 71);

                    case 22:
                      _target = String(args[0]);

                      if (_target) {
                        _context2.next = 27;
                        break;
                      }

                      err = new Error('No alias id specified');

                      err.userError = true;
                      throw err;

                    case 27:
                      if (!(args.length !== 1)) {
                        _context2.next = 30;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now alias rm <id>`'));
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 30:
                      _context2.next = 32;
                      return alias.ls();

                    case 32:
                      _aliases = _context2.sent;
                      _alias = findAlias(_target, _aliases);

                      if (_alias) {
                        _context2.next = 38;
                        break;
                      }

                      _err = new Error('Alias not found by "' + _target + '". Run ' + _chalk2.default.dim('`now alias ls`') + ' to see your aliases.');

                      _err.userError = true;
                      throw _err;

                    case 38:
                      _context2.prev = 38;
                      _context2.next = 41;
                      return readConfirmation(alias, _alias, _aliases);

                    case 41:
                      confirmation = _context2.sent.toLowerCase();

                      if (confirmation !== 'y' && confirmation !== 'yes') {
                        console.log('\n> Aborted');
                        process.exit(0);
                      }

                      start = new Date();
                      _context2.next = 46;
                      return alias.rm(_alias);

                    case 46:
                      elapsed = (0, _ms2.default)(new Date() - start);

                      console.log(_chalk2.default.cyan('> Success!') + ' Alias ' + _chalk2.default.bold(_alias.uid) + ' removed [' + elapsed + ']');
                      _context2.next = 54;
                      break;

                    case 50:
                      _context2.prev = 50;
                      _context2.t1 = _context2['catch'](38);

                      (0, _error.error)(_context2.t1);
                      exit(1);

                    case 54:
                      return _context2.abrupt('break', 71);

                    case 55:
                      if (!(args.length !== 2)) {
                        _context2.next = 58;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now alias set <id> <domain>`'));
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 58:
                      _context2.next = 60;
                      return alias.set(String(args[0]), String(args[1]));

                    case 60:
                      return _context2.abrupt('break', 71);

                    case 61:
                      if (!(argv._.length === 0)) {
                        _context2.next = 65;
                        break;
                      }

                      _context2.next = 64;
                      return realias(alias);

                    case 64:
                      return _context2.abrupt('break', 71);

                    case 65:
                      if (!(argv._.length === 2)) {
                        _context2.next = 70;
                        break;
                      }

                      _context2.next = 68;
                      return alias.set(String(argv._[0]), String(argv._[1]));

                    case 68:
                      _context2.next = 71;
                      break;

                    case 70:
                      if (argv._.length >= 3) {
                        (0, _error.error)('Invalid number of arguments');
                        help();
                        exit(1);
                      } else {
                        (0, _error.error)('Please specify a valid subcommand: ls | set | rm');
                        help();
                        exit(1);
                      }

                    case 71:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, _this, [[38, 50]]);
            })(), 't0', 3);

          case 3:
            _ret = _context3.t0;

            if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
              _context3.next = 6;
              break;
            }

            return _context3.abrupt('return', _ret.v);

          case 6:

            alias.close();

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function run(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var readConfirmation = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(alias, _alias) {
    var deploymentsList, urls;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return alias.list();

          case 2:
            deploymentsList = _context4.sent;
            urls = new _map2.default(deploymentsList.map(function (l) {
              return [l.uid, l.url];
            }));
            return _context4.abrupt('return', new _promise2.default(function (resolve) {
              var time = _chalk2.default.gray((0, _ms2.default)(new Date() - new Date(_alias.created)) + ' ago');
              var _sourceUrl = _chalk2.default.underline('https://' + urls.get(_alias.deploymentId));
              var tbl = (0, _textTable2.default)([[_alias.uid, _sourceUrl, _chalk2.default.underline('https://' + _alias.alias), time]], { align: ['l', 'r', 'l'], hsep: ' '.repeat(6) });

              process.stdout.write('> The following alias will be removed permanently\n');
              process.stdout.write('  ' + tbl + '\n');
              process.stdout.write('  ' + _chalk2.default.bold.red('> Are you sure?') + ' ' + _chalk2.default.gray('[y/N] '));

              process.stdin.on('data', function (d) {
                process.stdin.pause();
                resolve(d.toString().trim());
              }).resume();
            }));

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function readConfirmation(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();

var realias = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(alias) {
    var path, _ref5, pkg, name, pkgConfig, target, source;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            path = process.cwd();
            _context5.next = 3;
            return (0, _readMetadata2.default)(path, {
              deploymentType: 'npm', // hard coding settings…
              quiet: true // `quiet`
            });

          case 3:
            _ref5 = _context5.sent;
            pkg = _ref5.pkg;
            name = _ref5.name;
            pkgConfig = pkg ? pkg.now || {} : {};
            target = pkgConfig.alias;

            // the user never intended to support aliases from the package

            if (target) {
              _context5.next = 11;
              break;
            }

            help();
            return _context5.abrupt('return', exit(0));

          case 11:
            _context5.next = 13;
            return alias.last(name);

          case 13:
            source = _context5.sent;
            _context5.next = 16;
            return alias.set(source.url, target);

          case 16:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function realias(_x5) {
    return _ref4.apply(this, arguments);
  };
}();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _strlen = require('../lib/strlen');

var _strlen2 = _interopRequireDefault(_strlen);

var _alias2 = require('../lib/alias');

var _alias3 = _interopRequireDefault(_alias2);

var _login = require('../lib/login');

var _login2 = _interopRequireDefault(_login);

var _cfg = require('../lib/cfg');

var cfg = _interopRequireWildcard(_cfg);

var _error = require('../lib/error');

var _toHost = require('../lib/to-host');

var _toHost2 = _interopRequireDefault(_toHost);

var _readMetadata = require('../lib/read-metadata');

var _readMetadata2 = _interopRequireDefault(_readMetadata);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  string: ['config', 'token'],
  boolean: ['help', 'debug'],
  alias: {
    help: 'h',
    config: 'c',
    debug: 'd',
    token: 't'
  }
});

// Ours


// Packages

var subcommand = argv._[0];

// options
var help = function help() {
  console.log('\n  ' + _chalk2.default.bold('𝚫 now alias') + ' <ls | set | rm> <deployment> <alias>\n\n  ' + _chalk2.default.dim('Options:') + '\n\n    -h, --help              Output usage information\n    -c ' + _chalk2.default.bold.underline('FILE') + ', --config=' + _chalk2.default.bold.underline('FILE') + '  Config file\n    -d, --debug             Debug mode [off]\n    -t ' + _chalk2.default.bold.underline('TOKEN') + ', --token=' + _chalk2.default.bold.underline('TOKEN') + ' Login token\n\n  ' + _chalk2.default.dim('Examples:') + '\n\n  ' + _chalk2.default.gray('–') + ' Lists all your aliases:\n\n      ' + _chalk2.default.cyan('$ now alias ls') + '\n\n  ' + _chalk2.default.gray('–') + ' Adds a new alias to ' + _chalk2.default.underline('my-api.now.sh') + ':\n\n      ' + _chalk2.default.cyan('$ now alias set ' + _chalk2.default.underline('api-ownv3nc9f8.now.sh') + ' ' + _chalk2.default.underline('my-api.now.sh')) + '\n\n      The ' + _chalk2.default.dim('`.now.sh`') + ' suffix can be ommited:\n\n      ' + _chalk2.default.cyan('$ now alias set api-ownv3nc9f8 my-api') + '\n\n      The deployment id can be used as the source:\n\n      ' + _chalk2.default.cyan('$ now alias set deploymentId my-alias') + '\n\n      Custom domains work as alias targets:\n\n      ' + _chalk2.default.cyan('$ now alias set ' + _chalk2.default.underline('api-ownv3nc9f8.now.sh') + ' ' + _chalk2.default.underline('my-api.com')) + '\n\n      ' + _chalk2.default.dim('–') + ' The subcommand ' + _chalk2.default.dim('`set`') + ' is the default and can be skipped.\n      ' + _chalk2.default.dim('–') + ' ' + _chalk2.default.dim('`http(s)://`') + ' in the URLs is unneeded / ignored.\n\n  ' + _chalk2.default.gray('–') + ' Removing an alias:\n\n      ' + _chalk2.default.cyan('$ now alias rm aliasId') + '\n\n      To get the list of alias ids, use ' + _chalk2.default.dim('`now alias ls`') + '.\n\n  ' + _chalk2.default.dim('Alias:') + ' ln\n');
};

// options
var debug = argv.debug;
var apiUrl = argv.url || 'https://api.zeit.co';

if (argv.config) {
  cfg.setConfigFile(argv.config);
}

var exit = function exit(code) {
  // we give stdout some time to flush out
  // because there's a node bug where
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(function () {
    return process.exit(code || 0);
  }, 100);
};

if (argv.help) {
  help();
  exit(0);
} else {
  var config = cfg.read();

  _promise2.default.resolve(argv.token || config.token || (0, _login2.default)(apiUrl)).then(function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(token) {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return run(token);

            case 3:
              _context.next = 9;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context['catch'](0);

              if (_context.t0.userError) {
                (0, _error.error)(_context.t0.message);
              } else {
                (0, _error.error)('Unknown error: ' + _context.t0.stack);
              }
              exit(1);

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[0, 5]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()).catch(function (e) {
    (0, _error.error)('Authentication error \u2013 ' + e.message);
    exit(1);
  });
}

function findAlias(alias, list) {
  var key = void 0;
  var val = void 0;

  if (/\./.test(alias)) {
    val = (0, _toHost2.default)(alias);
    key = 'alias';
  } else {
    val = alias;
    key = 'uid';
  }

  var _alias = list.find(function (d) {
    if (d[key] === val) {
      if (debug) {
        console.log('> [debug] matched alias ' + d.uid + ' by ' + key + ' ' + val);
      }

      return true;
    }

    // match prefix
    if (val + '.now.sh' === d.alias) {
      if (debug) {
        console.log('> [debug] matched alias ' + d.uid + ' by url ' + d.host);
      }

      return true;
    }

    return false;
  });

  return _alias;
}