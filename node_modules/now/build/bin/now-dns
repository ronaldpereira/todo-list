#!/usr/bin/env node
'use strict';

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var run = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(token) {
    var _this = this;

    var domainRecords, args, start, _ret, domain, name, type, value, mxPriority, record, _elapsed, _record, yes, _elapsed2;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            domainRecords = new _domainRecords2.default(apiUrl, token, { debug: debug });
            args = argv._.slice(1);
            start = Date.now();

            if (!(subcommand === 'ls' || subcommand === 'list')) {
              _context3.next = 10;
              break;
            }

            return _context3.delegateYield(_regenerator2.default.mark(function _callee2() {
              var elapsed, res, text, count;
              return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      if (!(args.length > 1)) {
                        _context2.next = 3;
                        break;
                      }

                      (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now dns ls [domain]`'));
                      return _context2.abrupt('return', {
                        v: exit(1)
                      });

                    case 3:
                      elapsed = (0, _ms2.default)(new Date() - start);
                      _context2.next = 6;
                      return domainRecords.ls(args[0]);

                    case 6:
                      res = _context2.sent;
                      text = [];
                      count = 0;

                      res.forEach(function (records, domain) {
                        count += records.length;
                        if (records.length > 0) {
                          (function () {
                            var cur = Date.now();
                            var header = [['', 'id', 'name', 'type', 'value', 'aux', 'created'].map(function (s) {
                              return _chalk2.default.dim(s);
                            })];
                            var out = (0, _textTable2.default)(header.concat(records.map(function (record) {
                              var time = _chalk2.default.gray((0, _ms2.default)(cur - new Date(Number(record.created))) + ' ago');
                              return ['', record.id, record.name, record.type, record.value, record.mxPriority ? record.mxPriority : '', time];
                            })), { align: ['l', 'r', 'l', 'l', 'l', 'l'], hsep: ' '.repeat(2), stringLength: _strlen2.default });
                            text.push('\n\n' + _chalk2.default.bold(domain) + '\n' + (0, _indent2.default)(out, 2));
                          })();
                        }
                      });
                      console.log('> ' + count + ' record' + (count === 1 ? '' : 's') + ' found ' + _chalk2.default.gray('[' + elapsed + ']'));
                      console.log(text.join(''));

                    case 12:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, _this);
            })(), 't0', 5);

          case 5:
            _ret = _context3.t0;

            if (!((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object")) {
              _context3.next = 8;
              break;
            }

            return _context3.abrupt('return', _ret.v);

          case 8:
            _context3.next = 51;
            break;

          case 10:
            if (!(subcommand === 'add')) {
              _context3.next = 26;
              break;
            }

            domain = args[0];
            name = args[1] === '@' ? '' : args[1];
            type = args[2];
            value = args[3];
            mxPriority = args[4];

            if (!(!(args.length >= 4 && args.length <= 5) || (type === 'MX' ? !mxPriority : mxPriority))) {
              _context3.next = 19;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now dns add <domain> <name> <type> <value> [mx_priority]`'));
            return _context3.abrupt('return', exit(1));

          case 19:
            _context3.next = 21;
            return domainRecords.create(domain, { name: name, type: type, value: value, mxPriority: mxPriority });

          case 21:
            record = _context3.sent;
            _elapsed = (0, _ms2.default)(new Date() - start);

            console.log(_chalk2.default.cyan('> Success!') + ' A new DNS record for domain ' + _chalk2.default.bold(domain) + ' ' + _chalk2.default.gray('(' + record.uid + ')') + ' created ' + _chalk2.default.gray('[' + _elapsed + ']'));
            _context3.next = 51;
            break;

          case 26:
            if (!(subcommand === 'rm' || subcommand === 'remove')) {
              _context3.next = 48;
              break;
            }

            if (!(args.length !== 1)) {
              _context3.next = 30;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now dns rm <id>`'));
            return _context3.abrupt('return', exit(1));

          case 30:
            _context3.next = 32;
            return domainRecords.getRecord(args[0]);

          case 32:
            _record = _context3.sent;

            if (_record) {
              _context3.next = 36;
              break;
            }

            (0, _error.error)('DNS record not found');
            return _context3.abrupt('return', exit(1));

          case 36:
            _context3.next = 38;
            return readConfirmation(_record, 'The following record will be removed permanently\n');

          case 38:
            yes = _context3.sent;

            if (yes) {
              _context3.next = 42;
              break;
            }

            (0, _error.error)('User abort');
            return _context3.abrupt('return', exit(0));

          case 42:
            _context3.next = 44;
            return domainRecords.delete(_record.domain, _record.id);

          case 44:
            _elapsed2 = (0, _ms2.default)(new Date() - start);

            console.log(_chalk2.default.cyan('> Success!') + ' Record ' + _chalk2.default.gray('' + _record.id) + ' removed ' + _chalk2.default.gray('[' + _elapsed2 + ']'));
            _context3.next = 51;
            break;

          case 48:
            (0, _error.error)('Please specify a valid subcommand: ls | add | rm');
            help();
            exit(1);

          case 51:
            return _context3.abrupt('return', domainRecords.close());

          case 52:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function run(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

var _cfg = require('../lib/cfg');

var cfg = _interopRequireWildcard(_cfg);

var _domainRecords = require('../lib/domain-records');

var _domainRecords2 = _interopRequireDefault(_domainRecords);

var _indent = require('../lib/indent');

var _indent2 = _interopRequireDefault(_indent);

var _login = require('../lib/login');

var _login2 = _interopRequireDefault(_login);

var _strlen = require('../lib/strlen');

var _strlen2 = _interopRequireDefault(_strlen);

var _error = require('../lib/error');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ours


// Packages
var argv = (0, _minimist2.default)(process.argv.slice(2), {
  string: ['config'],
  boolean: ['help', 'debug'],
  alias: {
    help: 'h',
    config: 'c',
    debug: 'd',
    token: 't'
  }
});
var subcommand = argv._[0];

// options
var help = function help() {
  console.log('\n  ' + _chalk2.default.bold('ùö´ now dns ls') + ' [domain]\n  ' + _chalk2.default.bold('ùö´ now dns add') + ' <domain> <name> <A | AAAA | ALIAS | CNAME | MX> <value> [mx_priority]\n  ' + _chalk2.default.bold('ùö´ now dns rm') + ' <id>\n\n  ' + _chalk2.default.dim('Options:') + '\n\n    -h, --help              output usage information\n    -c ' + _chalk2.default.bold.underline('FILE') + ', --config=' + _chalk2.default.bold.underline('FILE') + '  config file\n    -d, --debug             debug mode [off]\n    -t ' + _chalk2.default.bold.underline('TOKEN') + ', --token=' + _chalk2.default.bold.underline('TOKEN') + ' login token\n\n  ' + _chalk2.default.dim('Examples:') + '\n\n  ' + _chalk2.default.gray('‚Äì') + ' List all your DNS records\n\n      ' + _chalk2.default.cyan('$ now dns ls') + '\n\n  ' + _chalk2.default.gray('‚Äì') + ' Add an A record for a subdomain\n\n      ' + _chalk2.default.cyan('$ now dns add zeit.rocks subdomain A 198.51.100.100') + '\n\n  ' + _chalk2.default.gray('‚Äì') + ' Add an MX record (@ as a name refers to the domain)\n\n      ' + _chalk2.default.cyan('$ now dns add zeit.rocks @ MX mail.zeit.rocks 10') + '\n');
};

// options
var debug = argv.debug;
var apiUrl = argv.url || 'https://api.zeit.co';
if (argv.config) {
  cfg.setConfigFile(argv.config);
}

var exit = function exit(code) {
  // we give stdout some time to flush out
  // because there's a node bug where
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(function () {
    return process.exit(code || 0);
  }, 100);
};

if (argv.help || !subcommand) {
  help();
  exit(0);
} else {
  var config = cfg.read();

  _promise2.default.resolve(argv.token || config.token || (0, _login2.default)(apiUrl)).then(function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(token) {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return run(token);

            case 3:
              _context.next = 9;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context['catch'](0);

              (0, _error.handleError)(_context.t0);
              exit(1);

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[0, 5]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()).catch(function (e) {
    (0, _error.error)('Authentication error \u2013 ' + e.message);
    exit(1);
  });
}

process.on('uncaughtException', function (err) {
  (0, _error.handleError)(err);
  exit(1);
});

function readConfirmation(record, msg) {
  return new _promise2.default(function (resolve) {
    var time = _chalk2.default.gray((0, _ms2.default)(new Date() - new Date(Number(record.created))) + ' ago');
    var tbl = (0, _textTable2.default)([[record.id, _chalk2.default.bold('' + (record.name.length > 0 ? record.name + '.' : '') + record.domain + ' ' + record.type + ' ' + record.value + ' ' + (record.mxPriority ? record.mxPriority : '')), time]], { align: ['l', 'r', 'l'], hsep: ' '.repeat(6) });

    process.stdout.write('> ' + msg);
    process.stdout.write('  ' + tbl + '\n');

    process.stdout.write(_chalk2.default.bold.red('> Are you sure?') + ' ' + _chalk2.default.gray('[y/N] '));

    process.stdin.on('data', function (d) {
      process.stdin.pause();
      resolve(d.toString().trim().toLowerCase() === 'y');
    }).resume();
  });
}