#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var run = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(token) {
    var certs, args, start, list, elapsed, cn, cert, crt, key, ca, _elapsed, _cert, yes, _elapsed2, _crt, _key, _ca, _cert2, _yes, _elapsed3, _cert3, _yes2, _elapsed4;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            certs = new _certs2.default(apiUrl, token, { debug: debug });
            args = argv._.slice(1);
            start = Date.now();

            if (!(subcommand === 'ls' || subcommand === 'list')) {
              _context2.next = 15;
              break;
            }

            if (!(args.length !== 0)) {
              _context2.next = 7;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now certs ls`'));
            return _context2.abrupt('return', exit(1));

          case 7:
            _context2.next = 9;
            return certs.ls();

          case 9:
            list = _context2.sent;
            elapsed = (0, _ms2.default)(new Date() - start);


            console.log('> ' + list.length + ' certificate' + (list.length === 1 ? '' : 's') + ' found ' + _chalk2.default.gray('[' + elapsed + ']'));

            if (list.length > 0) {
              (function () {
                var cur = Date.now();
                list.sort(function (a, b) {
                  return a.cn.localeCompare(b.cn);
                });
                var header = [['', 'id', 'cn', 'created', 'expiration'].map(function (s) {
                  return _chalk2.default.dim(s);
                })];
                var out = (0, _textTable2.default)(header.concat(list.map(function (cert) {
                  var cn = _chalk2.default.bold(cert.cn);
                  var time = _chalk2.default.gray((0, _ms2.default)(cur - new Date(cert.created)) + ' ago');
                  var expiration = formatExpirationDate(new Date(cert.expiration));
                  return ['', cert.uid ? cert.uid : 'unknown', cn, time, expiration];
                })), { align: ['l', 'r', 'l', 'l', 'l'], hsep: ' '.repeat(2), stringLength: _strlen2.default });

                if (out) {
                  console.log('\n' + out + '\n');
                }
              })();
            }
            _context2.next = 111;
            break;

          case 15:
            if (!(subcommand === 'create')) {
              _context2.next = 42;
              break;
            }

            if (!(args.length !== 1)) {
              _context2.next = 19;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now certs create <cn>`'));
            return _context2.abrupt('return', exit(1));

          case 19:
            cn = args[0];
            cert = void 0;

            if (!(argv.crt || argv.key || argv.ca)) {
              _context2.next = 33;
              break;
            }

            if (!(!argv.crt || !argv.key)) {
              _context2.next = 25;
              break;
            }

            (0, _error.error)('Missing required arguments for a custom certificate entry. Usage: ' + _chalk2.default.cyan('`now certs create --crt DOMAIN.CRT --key DOMAIN.KEY [--ca CA.CRT] <id | cn>`'));
            return _context2.abrupt('return', exit(1));

          case 25:
            crt = readX509File(argv.crt);
            key = readX509File(argv.key);
            ca = argv.ca ? readX509File(argv.ca) : '';
            _context2.next = 30;
            return certs.put(cn, crt, key, ca);

          case 30:
            cert = _context2.sent;
            _context2.next = 36;
            break;

          case 33:
            _context2.next = 35;
            return certs.create(cn);

          case 35:
            cert = _context2.sent;

          case 36:
            if (cert) {
              _context2.next = 38;
              break;
            }

            return _context2.abrupt('return', exit(1));

          case 38:
            _elapsed = (0, _ms2.default)(new Date() - start);

            console.log(_chalk2.default.cyan('> Success!') + ' Certificate entry ' + _chalk2.default.bold(cn) + ' ' + _chalk2.default.gray('(' + cert.uid + ')') + ' created ' + _chalk2.default.gray('[' + _elapsed + ']'));
            _context2.next = 111;
            break;

          case 42:
            if (!(subcommand === 'renew')) {
              _context2.next = 63;
              break;
            }

            if (!(args.length !== 1)) {
              _context2.next = 46;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now certs renew <id | cn>`'));
            return _context2.abrupt('return', exit(1));

          case 46:
            _context2.next = 48;
            return getCertIdCn(certs, args[0]);

          case 48:
            _cert = _context2.sent;

            if (_cert) {
              _context2.next = 51;
              break;
            }

            return _context2.abrupt('return', exit(1));

          case 51:
            _context2.next = 53;
            return readConfirmation(_cert, 'The following certificate will be renewed\n');

          case 53:
            yes = _context2.sent;

            if (yes) {
              _context2.next = 57;
              break;
            }

            (0, _error.error)('User abort');
            return _context2.abrupt('return', exit(0));

          case 57:
            _context2.next = 59;
            return certs.renew(_cert.cn);

          case 59:
            _elapsed2 = (0, _ms2.default)(new Date() - start);

            console.log(_chalk2.default.cyan('> Success!') + ' Certificate ' + _chalk2.default.bold(_cert.cn) + ' ' + _chalk2.default.gray('(' + _cert.uid + ')') + ' renewed ' + _chalk2.default.gray('[' + _elapsed2 + ']'));
            _context2.next = 111;
            break;

          case 63:
            if (!(subcommand === 'replace')) {
              _context2.next = 87;
              break;
            }

            if (!(!argv.crt || !argv.key)) {
              _context2.next = 67;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now certs replace --crt DOMAIN.CRT --key DOMAIN.KEY [--ca CA.CRT] <id | cn>`'));
            return _context2.abrupt('return', exit(1));

          case 67:
            _crt = readX509File(argv.crt);
            _key = readX509File(argv.key);
            _ca = argv.ca ? readX509File(argv.ca) : '';
            _context2.next = 72;
            return getCertIdCn(certs, args[0]);

          case 72:
            _cert2 = _context2.sent;

            if (_cert2) {
              _context2.next = 75;
              break;
            }

            return _context2.abrupt('return', exit(1));

          case 75:
            _context2.next = 77;
            return readConfirmation(_cert2, 'The following certificate will be replaced permanently\n');

          case 77:
            _yes = _context2.sent;

            if (_yes) {
              _context2.next = 81;
              break;
            }

            (0, _error.error)('User abort');
            return _context2.abrupt('return', exit(0));

          case 81:
            _context2.next = 83;
            return certs.put(_cert2.cn, _crt, _key, _ca);

          case 83:
            _elapsed3 = (0, _ms2.default)(new Date() - start);

            console.log(_chalk2.default.cyan('> Success!') + ' Certificate ' + _chalk2.default.bold(_cert2.cn) + ' ' + _chalk2.default.gray('(' + _cert2.uid + ')') + ' replaced ' + _chalk2.default.gray('[' + _elapsed3 + ']'));
            _context2.next = 111;
            break;

          case 87:
            if (!(subcommand === 'rm' || subcommand === 'remove')) {
              _context2.next = 108;
              break;
            }

            if (!(args.length !== 1)) {
              _context2.next = 91;
              break;
            }

            (0, _error.error)('Invalid number of arguments. Usage: ' + _chalk2.default.cyan('`now certs rm <id | cn>`'));
            return _context2.abrupt('return', exit(1));

          case 91:
            _context2.next = 93;
            return getCertIdCn(certs, args[0]);

          case 93:
            _cert3 = _context2.sent;

            if (_cert3) {
              _context2.next = 96;
              break;
            }

            return _context2.abrupt('return', exit(1));

          case 96:
            _context2.next = 98;
            return readConfirmation(_cert3, 'The following certificate will be removed permanently\n');

          case 98:
            _yes2 = _context2.sent;

            if (_yes2) {
              _context2.next = 102;
              break;
            }

            (0, _error.error)('User abort');
            return _context2.abrupt('return', exit(0));

          case 102:
            _context2.next = 104;
            return certs.delete(_cert3.cn);

          case 104:
            _elapsed4 = (0, _ms2.default)(new Date() - start);

            console.log(_chalk2.default.cyan('> Success!') + ' Certificate ' + _chalk2.default.bold(_cert3.cn) + ' ' + _chalk2.default.gray('(' + _cert3.uid + ')') + ' removed ' + _chalk2.default.gray('[' + _elapsed4 + ']'));
            _context2.next = 111;
            break;

          case 108:
            (0, _error.error)('Please specify a valid subcommand: ls | create | renew | replace | rm');
            help();
            exit(1);

          case 111:
            return _context2.abrupt('return', certs.close());

          case 112:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function run(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var getCertIdCn = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(certs, idOrCn) {
    var list, thecert;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return certs.ls();

          case 2:
            list = _context3.sent;
            thecert = list.filter(function (cert) {
              return cert.uid === idOrCn || cert.cn === idOrCn;
            })[0];

            if (thecert) {
              _context3.next = 7;
              break;
            }

            (0, _error.error)('No certificate found by id or cn "' + idOrCn + '"');
            return _context3.abrupt('return', null);

          case 7:
            return _context3.abrupt('return', thecert);

          case 8:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getCertIdCn(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _strlen = require('../lib/strlen');

var _strlen2 = _interopRequireDefault(_strlen);

var _cfg = require('../lib/cfg');

var cfg = _interopRequireWildcard(_cfg);

var _error = require('../lib/error');

var _certs = require('../lib/certs');

var _certs2 = _interopRequireDefault(_certs);

var _login = require('../lib/login');

var _login2 = _interopRequireDefault(_login);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Packages
var argv = (0, _minimist2.default)(process.argv.slice(2), {
  string: ['config', 'token', 'crt', 'key', 'ca'],
  boolean: ['help', 'debug'],
  alias: {
    help: 'h',
    config: 'c',
    debug: 'd',
    token: 't'
  }
});

// Ours


// Native


var subcommand = argv._[0];

// options
var help = function help() {
  console.log('\n  ' + _chalk2.default.bold('𝚫 now certs') + ' <ls | create | renew | replace | rm> <cn>\n\n  ' + _chalk2.default.dim('Note:') + '\n\n  This command is intended for advanced use only, normally ' + _chalk2.default.bold('now') + ' manages your certificates automatically.\n\n  ' + _chalk2.default.dim('Options:') + '\n\n    -h, --help              Output usage information\n    -c ' + _chalk2.default.bold.underline('FILE') + ', --config=' + _chalk2.default.bold.underline('FILE') + '  Config file\n    -d, --debug             Debug mode [off]\n    -t ' + _chalk2.default.bold.underline('TOKEN') + ', --token=' + _chalk2.default.bold.underline('TOKEN') + ' Login token\n    --crt ' + _chalk2.default.bold.underline('FILE') + '              Certificate file\n    --key ' + _chalk2.default.bold.underline('FILE') + '              Certificate key file\n    --ca ' + _chalk2.default.bold.underline('FILE') + '               CA certificate chain file\n\n  ' + _chalk2.default.dim('Examples:') + '\n\n  ' + _chalk2.default.gray('–') + ' Listing all your certificates:\n\n      ' + _chalk2.default.cyan('$ now certs ls') + '\n\n  ' + _chalk2.default.gray('–') + ' Creating a new certificate:\n\n      ' + _chalk2.default.cyan('$ now certs create domain.com') + '\n\n  ' + _chalk2.default.gray('–') + ' Renewing an existing certificate issued with ' + _chalk2.default.bold('now') + ':\n\n      ' + _chalk2.default.cyan('$ now certs renew domain.com') + '\n\n  ' + _chalk2.default.gray('–') + ' Replacing an existing certificate with a user-supplied certificate:\n\n      ' + _chalk2.default.cyan('$ now certs replace --crt domain.crt --key domain.key --ca ca_chain.crt domain.com') + '\n');
};

// options
var debug = argv.debug;
var apiUrl = argv.url || 'https://api.zeit.co';

if (argv.config) {
  cfg.setConfigFile(argv.config);
}

var exit = function exit(code) {
  // we give stdout some time to flush out
  // because there's a node bug where
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(function () {
    return process.exit(code || 0);
  }, 100);
};

if (argv.help || !subcommand) {
  help();
  exit(0);
} else {
  var config = cfg.read();

  _promise2.default.resolve(argv.token || config.token || (0, _login2.default)(apiUrl)).then(function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(token) {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return run(token);

            case 3:
              _context.next = 9;
              break;

            case 5:
              _context.prev = 5;
              _context.t0 = _context['catch'](0);

              (0, _error.handleError)(_context.t0);
              exit(1);

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[0, 5]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()).catch(function (e) {
    (0, _error.error)('Authentication error \u2013 ' + e.message);
    exit(1);
  });
}

function formatExpirationDate(date) {
  var diff = date - Date.now();
  return diff < 0 ? _chalk2.default.gray((0, _ms2.default)(-diff) + ' ago') : _chalk2.default.gray('in ' + (0, _ms2.default)(diff));
}

process.on('uncaughtException', function (err) {
  (0, _error.handleError)(err);
  exit(1);
});

function readConfirmation(cert, msg) {
  return new _promise2.default(function (resolve) {
    var time = _chalk2.default.gray((0, _ms2.default)(new Date() - new Date(cert.created)) + ' ago');
    var tbl = (0, _textTable2.default)([[cert.uid, _chalk2.default.bold(cert.cn), time]], { align: ['l', 'r', 'l'], hsep: ' '.repeat(6) });

    process.stdout.write('> ' + msg);
    process.stdout.write('  ' + tbl + '\n');

    process.stdout.write(_chalk2.default.bold.red('> Are you sure?') + ' ' + _chalk2.default.gray('[y/N] '));

    process.stdin.on('data', function (d) {
      process.stdin.pause();
      resolve(d.toString().trim().toLowerCase() === 'y');
    }).resume();
  });
}

function readX509File(file) {
  return _fsPromise2.default.readFileSync(_path2.default.resolve(file), 'utf8');
}