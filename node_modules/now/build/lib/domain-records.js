'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DomainRecords = function (_Now) {
  (0, _inherits3.default)(DomainRecords, _Now);

  function DomainRecords() {
    (0, _classCallCheck3.default)(this, DomainRecords);
    return (0, _possibleConstructorReturn3.default)(this, (DomainRecords.__proto__ || (0, _getPrototypeOf2.default)(DomainRecords)).apply(this, arguments));
  }

  (0, _createClass3.default)(DomainRecords, [{
    key: 'getRecord',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(id) {
        var all, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, domain, records, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, record;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.ls();

              case 2:
                all = _context.sent.entries();
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 6;
                _iterator = (0, _getIterator3.default)(all);

              case 8:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 40;
                  break;
                }

                _step$value = (0, _slicedToArray3.default)(_step.value, 2), domain = _step$value[0], records = _step$value[1];
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context.prev = 13;
                _iterator2 = (0, _getIterator3.default)(records);

              case 15:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context.next = 23;
                  break;
                }

                record = _step2.value;

                if (!(record.id === id)) {
                  _context.next = 20;
                  break;
                }

                record.domain = domain;
                return _context.abrupt('return', record);

              case 20:
                _iteratorNormalCompletion2 = true;
                _context.next = 15;
                break;

              case 23:
                _context.next = 29;
                break;

              case 25:
                _context.prev = 25;
                _context.t0 = _context['catch'](13);
                _didIteratorError2 = true;
                _iteratorError2 = _context.t0;

              case 29:
                _context.prev = 29;
                _context.prev = 30;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 32:
                _context.prev = 32;

                if (!_didIteratorError2) {
                  _context.next = 35;
                  break;
                }

                throw _iteratorError2;

              case 35:
                return _context.finish(32);

              case 36:
                return _context.finish(29);

              case 37:
                _iteratorNormalCompletion = true;
                _context.next = 8;
                break;

              case 40:
                _context.next = 46;
                break;

              case 42:
                _context.prev = 42;
                _context.t1 = _context['catch'](6);
                _didIteratorError = true;
                _iteratorError = _context.t1;

              case 46:
                _context.prev = 46;
                _context.prev = 47;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 49:
                _context.prev = 49;

                if (!_didIteratorError) {
                  _context.next = 52;
                  break;
                }

                throw _iteratorError;

              case 52:
                return _context.finish(49);

              case 53:
                return _context.finish(46);

              case 54:
                return _context.abrupt('return', null);

              case 55:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[6, 42, 46, 54], [13, 25, 29, 37], [30,, 32, 36], [47,, 49, 53]]);
      }));

      function getRecord(_x) {
        return _ref.apply(this, arguments);
      }

      return getRecord;
    }()
  }, {
    key: 'ls',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(dom) {
        var _this2 = this;

        var domains, ret, records, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _loop, _iterator3, _step3;

        return _regenerator2.default.wrap(function _callee3$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                domains = void 0;

                if (!dom) {
                  _context4.next = 5;
                  break;
                }

                domains = [dom];
                _context4.next = 9;
                break;

              case 5:
                _context4.next = 7;
                return this.listDomains();

              case 7:
                ret = _context4.sent;

                domains = ret.filter(function (x) {
                  return !x.isExternal;
                }).map(function (x) {
                  return x.name;
                }).sort(function (a, b) {
                  return a.localeCompare(b);
                });

              case 9:
                records = new _map2.default();
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context4.prev = 13;
                _loop = _regenerator2.default.mark(function _loop() {
                  var domain, body;
                  return _regenerator2.default.wrap(function _loop$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          domain = _step3.value;
                          _context3.next = 3;
                          return _this2.retry(function () {
                            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(bail, attempt) {
                              var url, res, body;
                              return _regenerator2.default.wrap(function _callee2$(_context2) {
                                while (1) {
                                  switch (_context2.prev = _context2.next) {
                                    case 0:
                                      url = '/domains/' + domain + '/records';

                                      if (_this2._debug) {
                                        console.time('> [debug] #' + attempt + ' GET ' + url);
                                      }
                                      _context2.next = 4;
                                      return _this2._fetch(url);

                                    case 4:
                                      res = _context2.sent;

                                      if (_this2._debug) {
                                        console.timeEnd('> [debug] #' + attempt + ' GET ' + url);
                                      }
                                      _context2.next = 8;
                                      return res.json();

                                    case 8:
                                      body = _context2.sent;

                                      if (!(res.status === 404 && body.code === 'not_found')) {
                                        _context2.next = 13;
                                        break;
                                      }

                                      return _context2.abrupt('return', bail(new Error(body.message)));

                                    case 13:
                                      if (!(res.status !== 200)) {
                                        _context2.next = 15;
                                        break;
                                      }

                                      throw new Error('Failed to get DNS records for domain "' + domain + '"');

                                    case 15:
                                      return _context2.abrupt('return', body);

                                    case 16:
                                    case 'end':
                                      return _context2.stop();
                                  }
                                }
                              }, _callee2, _this2);
                            }));

                            return function (_x3, _x4) {
                              return _ref3.apply(this, arguments);
                            };
                          }());

                        case 3:
                          body = _context3.sent;

                          records.set(domain, body.records.sort(function (a, b) {
                            return a.slug.localeCompare(b.slug);
                          }));

                        case 5:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _loop, _this2);
                });
                _iterator3 = (0, _getIterator3.default)(domains);

              case 16:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context4.next = 21;
                  break;
                }

                return _context4.delegateYield(_loop(), 't0', 18);

              case 18:
                _iteratorNormalCompletion3 = true;
                _context4.next = 16;
                break;

              case 21:
                _context4.next = 27;
                break;

              case 23:
                _context4.prev = 23;
                _context4.t1 = _context4['catch'](13);
                _didIteratorError3 = true;
                _iteratorError3 = _context4.t1;

              case 27:
                _context4.prev = 27;
                _context4.prev = 28;

                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }

              case 30:
                _context4.prev = 30;

                if (!_didIteratorError3) {
                  _context4.next = 33;
                  break;
                }

                throw _iteratorError3;

              case 33:
                return _context4.finish(30);

              case 34:
                return _context4.finish(27);

              case 35:
                return _context4.abrupt('return', records);

              case 36:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee3, this, [[13, 23, 27, 35], [28,, 30, 34]]);
      }));

      function ls(_x2) {
        return _ref2.apply(this, arguments);
      }

      return ls;
    }()
  }, {
    key: 'create',
    value: function create(domain) {
      var _this3 = this;

      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          name = _ref4.name,
          type = _ref4.type,
          value = _ref4.value,
          mxPriority = _ref4.mxPriority;

      var url = '/domains/' + domain + '/records';

      return this.retry(function () {
        var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(bail, attempt) {
          var res, body, err, _err;

          return _regenerator2.default.wrap(function _callee4$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (_this3._debug) {
                    console.time('> [debug] #' + attempt + ' POST ' + url);
                  }
                  _context5.next = 3;
                  return _this3._fetch(url, {
                    method: 'POST',
                    body: { name: name, value: value, type: type, mxPriority: mxPriority }
                  });

                case 3:
                  res = _context5.sent;

                  if (_this3._debug) {
                    console.timeEnd('> [debug] #' + attempt + ' POST ' + url);
                  }

                  _context5.next = 7;
                  return res.json();

                case 7:
                  body = _context5.sent;

                  if (!(res.status === 400)) {
                    _context5.next = 12;
                    break;
                  }

                  return _context5.abrupt('return', bail(new Error(body.error ? body.error.message : 'Unknown error')));

                case 12:
                  if (!(res.status === 403)) {
                    _context5.next = 18;
                    break;
                  }

                  err = new Error('Not authorized to access the domain "' + name + '"');

                  err.userError = true;
                  return _context5.abrupt('return', bail(err));

                case 18:
                  if (!(res.status === 404)) {
                    _context5.next = 24;
                    break;
                  }

                  _err = void 0;

                  if (!(body.error.code === 'not_found')) {
                    _context5.next = 24;
                    break;
                  }

                  _err = new Error('The domain "' + domain + '" was not found');
                  _err.userError = true;
                  return _context5.abrupt('return', bail(_err));

                case 24:
                  if (!(res.status !== 200)) {
                    _context5.next = 26;
                    break;
                  }

                  throw new Error(body.error ? body.error.message : 'Unknown error');

                case 26:
                  return _context5.abrupt('return', body);

                case 27:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee4, _this3);
        }));

        return function (_x6, _x7) {
          return _ref5.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'delete',
    value: function _delete(domain, recordId) {
      var _this4 = this;

      var url = '/domains/' + domain + '/records/' + recordId;

      return this.retry(function () {
        var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(bail, attempt) {
          var res, body, err, _err2;

          return _regenerator2.default.wrap(function _callee5$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (_this4._debug) {
                    console.time('> [debug] #' + attempt + ' DELETE ' + url);
                  }
                  _context6.next = 3;
                  return _this4._fetch(url, { method: 'DELETE' });

                case 3:
                  res = _context6.sent;

                  if (_this4._debug) {
                    console.timeEnd('> [debug] #' + attempt + ' DELETE ' + url);
                  }

                  _context6.next = 7;
                  return res.json();

                case 7:
                  body = _context6.sent;

                  if (!(res.status === 403)) {
                    _context6.next = 14;
                    break;
                  }

                  err = new Error('Not authorized to access domain ' + domain);

                  err.userError = true;
                  return _context6.abrupt('return', bail(err));

                case 14:
                  if (!(res.status === 404)) {
                    _context6.next = 20;
                    break;
                  }

                  _err2 = void 0;

                  if (!(body.error.code === 'not_found')) {
                    _context6.next = 20;
                    break;
                  }

                  _err2 = new Error(body.error.message);
                  _err2.userError = true;
                  return _context6.abrupt('return', bail(_err2));

                case 20:
                  if (!(res.status !== 200)) {
                    _context6.next = 22;
                    break;
                  }

                  throw new Error(body.error ? body.error.message : 'Unkown error');

                case 22:
                  return _context6.abrupt('return', body);

                case 23:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee5, _this4);
        }));

        return function (_x8, _x9) {
          return _ref6.apply(this, arguments);
        };
      }());
    }
  }]);
  return DomainRecords;
}(_lib2.default); // Ours


exports.default = DomainRecords;