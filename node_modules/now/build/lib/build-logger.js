'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _ansiEscapes = require('ansi-escapes');

var _ansiEscapes2 = _interopRequireDefault(_ansiEscapes);

var _socket = require('socket.io-client');

var _socket2 = _interopRequireDefault(_socket);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Native
var Lines = function () {
  function Lines() {
    var maxLines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
    (0, _classCallCheck3.default)(this, Lines);

    this.max = maxLines;
    this.buf = [];
  }

  (0, _createClass3.default)(Lines, [{
    key: 'write',
    value: function write(str) {
      var max = this.max,
          buf = this.buf;


      if (buf.length === max) {
        process.stdout.write(_ansiEscapes2.default.eraseLines(max + 1));
        buf.shift();
        buf.forEach(function (line) {
          return console.log(line);
        });
      }

      buf.push(str);
      console.log(str);
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.buf = [];
    }
  }]);
  return Lines;
}();

// Packages


var Logger = function (_EventEmitter) {
  (0, _inherits3.default)(Logger, _EventEmitter);

  function Logger(host) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$debug = _ref.debug,
        debug = _ref$debug === undefined ? false : _ref$debug,
        _ref$quiet = _ref.quiet,
        quiet = _ref$quiet === undefined ? false : _ref$quiet;

    (0, _classCallCheck3.default)(this, Logger);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Logger.__proto__ || (0, _getPrototypeOf2.default)(Logger)).call(this));

    _this.host = host;
    _this.debug = debug;
    _this.quiet = quiet;

    // readyState
    _this.building = false;

    _this.socket = (0, _socket2.default)('https://io.now.sh?host=' + host);
    _this.socket.once('error', _this.onSocketError.bind(_this));
    _this.socket.on('state', _this.onState.bind(_this));
    _this.socket.on('logs', _this.onLog.bind(_this));
    _this.socket.on('backend', _this.onComplete.bind(_this));

    _this.lines = new Lines(10);
    return _this;
  }

  (0, _createClass3.default)(Logger, [{
    key: 'onState',
    value: function onState(state) {
      if (!state.id) {
        console.error('> Deployment not found');
        this.emit('error');
        return;
      }

      if (state.error) {
        console.error('> Deployment error');
        this.emit('error');
        return;
      }

      if (state.backend) {
        this.onComplete();
        return;
      }

      if (state.logs) {
        state.logs.forEach(this.onLog, this);
      }
    }
  }, {
    key: 'onLog',
    value: function onLog(log) {
      var _this2 = this;

      if (!this.building) {
        if (!this.quiet) {
          console.log('> Building');
        }
        this.building = true;
      }

      if (this.quiet) {
        return;
      }

      if (log.type === 'command') {
        console.log(_chalk2.default.gray('>') + ' \u25B2 ' + log.data);
        this.lines.reset();
      } else if (log.type === 'stderr') {
        log.data.split('\n').forEach(function (v) {
          if (v.length > 0) {
            console.error(_chalk2.default.gray('> ' + v));
          }
        });
        this.lines.reset();
      } else if (log.type === 'stdout') {
        log.data.split('\n').forEach(function (v) {
          if (v.length > 0) {
            _this2.lines.write(_chalk2.default.gray('>') + ' ' + v);
          }
        });
      }
    }
  }, {
    key: 'onComplete',
    value: function onComplete() {
      this.socket.disconnect();

      if (this.building) {
        this.building = false;
      }

      this.emit('close');
    }
  }, {
    key: 'onSocketError',
    value: function onSocketError(err) {
      if (this.debug) {
        console.log('> [debug] Socket error', err.stack);
      }
    }
  }]);
  return Logger;
}(_events2.default);

exports.default = Logger;