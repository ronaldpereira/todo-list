'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _os = require('os');

var _path = require('path');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _bytes = require('bytes');

var _bytes2 = _interopRequireDefault(_bytes);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _asyncRetry = require('async-retry');

var _asyncRetry2 = _interopRequireDefault(_asyncRetry);

var _ini = require('ini');

var _fsPromise = require('fs-promise');

var _resumer = require('resumer');

var _resumer2 = _interopRequireDefault(_resumer);

var _splitArray = require('split-array');

var _splitArray2 = _interopRequireDefault(_splitArray);

var _getFiles = require('./get-files');

var _ua = require('./ua');

var _ua2 = _interopRequireDefault(_ua);

var _hash = require('./hash');

var _hash2 = _interopRequireDefault(_hash);

var _agent = require('./agent');

var _agent2 = _interopRequireDefault(_agent);

var _readMetadata = require('./read-metadata');

var _readMetadata2 = _interopRequireDefault(_readMetadata);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// how many concurrent HTTP/2 stream uploads


// Packages
var MAX_CONCURRENT = 10;

// check if running windows


// Ours
// Native
var IS_WIN = /^win/.test(process.platform);
var SEP = IS_WIN ? '\\' : '/';

var Now = function (_EventEmitter) {
  (0, _inherits3.default)(Now, _EventEmitter);

  function Now(url, token, _ref) {
    var _ref$forceNew = _ref.forceNew,
        forceNew = _ref$forceNew === undefined ? false : _ref$forceNew,
        _ref$debug = _ref.debug,
        debug = _ref$debug === undefined ? false : _ref$debug;
    (0, _classCallCheck3.default)(this, Now);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Now.__proto__ || (0, _getPrototypeOf2.default)(Now)).call(this));

    _this._token = token;
    _this._debug = debug;
    _this._forceNew = forceNew;
    _this._agent = new _agent2.default(url, { debug: debug });
    _this._onRetry = _this._onRetry.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Now, [{
    key: 'create',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(path, _ref3) {
        var _this2 = this;

        var wantsPublic = _ref3.wantsPublic,
            _ref3$quiet = _ref3.quiet,
            quiet = _ref3$quiet === undefined ? false : _ref3$quiet,
            _ref3$env = _ref3.env,
            env = _ref3$env === undefined ? {} : _ref3$env,
            _ref3$forceNew = _ref3.forceNew,
            forceNew = _ref3$forceNew === undefined ? false : _ref3$forceNew,
            _ref3$forceSync = _ref3.forceSync,
            forceSync = _ref3$forceSync === undefined ? false : _ref3$forceSync,
            _ref3$forwardNpm = _ref3.forwardNpm,
            forwardNpm = _ref3$forwardNpm === undefined ? false : _ref3$forwardNpm,
            _ref3$deploymentType = _ref3.deploymentType,
            deploymentType = _ref3$deploymentType === undefined ? 'npm' : _ref3$deploymentType,
            deploymentName = _ref3.deploymentName,
            _ref3$isStatic = _ref3.isStatic,
            isStatic = _ref3$isStatic === undefined ? false : _ref3$isStatic;

        var files, _ref4, pkg, name, description, nowProperties, npmrc, authToken, pkgDetails, hashes, engines, deployment, missingVersion;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this._path = path;
                this._static = isStatic;

                files = void 0;
                _context2.next = 5;
                return (0, _readMetadata2.default)(path, {
                  deploymentType: deploymentType,
                  deploymentName: deploymentName,
                  quiet: quiet,
                  isStatic: isStatic
                });

              case 5:
                _ref4 = _context2.sent;
                pkg = _ref4.pkg;
                name = _ref4.name;
                description = _ref4.description;


                if (this._debug) {
                  console.time('> [debug] Getting files');
                }

                if (!(deploymentType === 'npm')) {
                  _context2.next = 16;
                  break;
                }

                _context2.next = 13;
                return (0, _getFiles.npm)(path, pkg, { debug: this._debug });

              case 13:
                files = _context2.sent;
                _context2.next = 19;
                break;

              case 16:
                _context2.next = 18;
                return (0, _getFiles.docker)(path, { debug: this._debug });

              case 18:
                files = _context2.sent;

              case 19:

                if (this._debug) {
                  console.timeEnd('> [debug] Getting files');
                }

                nowProperties = pkg ? pkg.now || {} : {};


                forwardNpm = forwardNpm || nowProperties.forwardNpm;

                // Read .npmrc
                npmrc = {};
                authToken = void 0;

                if (!(deploymentType === 'npm' && forwardNpm)) {
                  _context2.next = 46;
                  break;
                }

                _context2.prev = 25;
                _context2.next = 28;
                return (0, _fsPromise.readFile)((0, _path.resolve)(path, '.npmrc'), 'utf8');

              case 28:
                npmrc = _context2.sent;

                npmrc = (0, _ini.parse)(npmrc);
                authToken = npmrc['//registry.npmjs.org/:_authToken'];
                _context2.next = 35;
                break;

              case 33:
                _context2.prev = 33;
                _context2.t0 = _context2['catch'](25);

              case 35:
                if (authToken) {
                  _context2.next = 46;
                  break;
                }

                _context2.prev = 36;
                _context2.next = 39;
                return (0, _fsPromise.readFile)((0, _path.resolve)((0, _os.homedir)(), '.npmrc'), 'utf8');

              case 39:
                npmrc = _context2.sent;

                npmrc = (0, _ini.parse)(npmrc);
                authToken = npmrc['//registry.npmjs.org/:_authToken'];
                _context2.next = 46;
                break;

              case 44:
                _context2.prev = 44;
                _context2.t1 = _context2['catch'](36);

              case 46:

                if (this._debug) {
                  console.time('> [debug] Computing hashes');
                }

                pkgDetails = {};

                pkgDetails.name = name;

                (0, _assign2.default)(pkgDetails, pkg);

                _context2.next = 52;
                return (0, _hash2.default)(files, isStatic, pkgDetails);

              case 52:
                hashes = _context2.sent;


                if (this._debug) {
                  console.timeEnd('> [debug] Computing hashes');
                }

                this._files = hashes;

                engines = nowProperties.engines || pkg.engines;
                _context2.next = 58;
                return this.retry(function () {
                  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(bail) {
                    var res, body, err;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (_this2._debug) {
                              console.time('> [debug] /now/create');
                            }

                            _context.next = 3;
                            return _this2._fetch('/now/create', {
                              method: 'POST',
                              body: {
                                env: env,
                                public: wantsPublic,
                                forceNew: forceNew,
                                forceSync: forceSync,
                                name: name,
                                description: description,
                                deploymentType: deploymentType,
                                registryAuthToken: authToken,
                                // Flatten the array to contain files to sync where each nested input
                                // array has a group of files with the same sha but different path
                                files: Array.prototype.concat.apply([], (0, _from2.default)(_this2._files).map(function (_ref6) {
                                  var _ref7 = (0, _slicedToArray3.default)(_ref6, 2),
                                      sha = _ref7[0],
                                      _ref7$ = _ref7[1],
                                      data = _ref7$.data,
                                      names = _ref7$.names;

                                  return names.map(function (n) {
                                    if (_this2._static && toRelative(n, _this2._path) !== 'package.json') {
                                      n = _this2.pathInsideContent(n);
                                    }

                                    return {
                                      sha: sha,
                                      size: data.length,
                                      file: toRelative(n, _this2._path)
                                    };
                                  });
                                })),
                                engines: engines
                              }
                            });

                          case 3:
                            res = _context.sent;


                            if (_this2._debug) {
                              console.timeEnd('> [debug] /now/create');
                            }

                            // no retry on 4xx
                            body = void 0;
                            _context.prev = 6;
                            _context.next = 9;
                            return res.json();

                          case 9:
                            body = _context.sent;
                            _context.next = 15;
                            break;

                          case 12:
                            _context.prev = 12;
                            _context.t0 = _context['catch'](6);
                            throw new Error('Unexpected response');

                          case 15:
                            if (!(res.status === 429)) {
                              _context.next = 19;
                              break;
                            }

                            return _context.abrupt('return', bail(responseError(res)));

                          case 19:
                            if (!(res.status >= 400 && res.status < 500)) {
                              _context.next = 25;
                              break;
                            }

                            err = new Error(body.error.message);

                            err.userError = true;
                            return _context.abrupt('return', bail(err));

                          case 25:
                            if (!(res.status !== 200)) {
                              _context.next = 27;
                              break;
                            }

                            throw new Error(body.error.message);

                          case 27:
                            return _context.abrupt('return', body);

                          case 28:
                          case 'end':
                            return _context.stop();
                        }
                      }
                    }, _callee, _this2, [[6, 12]]);
                  }));

                  return function (_x3) {
                    return _ref5.apply(this, arguments);
                  };
                }());

              case 58:
                deployment = _context2.sent;


                // we report about files whose sizes are too big
                missingVersion = false;

                if (deployment.warnings) {
                  (function () {
                    var sizeExceeded = 0;
                    deployment.warnings.forEach(function (warning) {
                      if (warning.reason === 'size_limit_exceeded') {
                        var sha = warning.sha,
                            limit = warning.limit;

                        var n = hashes.get(sha).names.pop();
                        console.error('> \x1B[31mWarning!\x1B[39m Skipping file %s (size exceeded %s)', n, (0, _bytes2.default)(limit));
                        hashes.get(sha).names.unshift(n); // move name (hack, if duplicate matches we report them in order)
                        sizeExceeded++;
                      } else if (warning.reason === 'node_version_not_found') {
                        var wanted = warning.wanted,
                            used = warning.used;

                        console.error('> \x1B[31mWarning!\x1B[39m Requested node version %s is not available', wanted, used);
                        missingVersion = true;
                      }
                    });

                    if (sizeExceeded) {
                      console.error('> \x1B[31mWarning!\x1B[39m ' + sizeExceeded + ' of the files ' + 'exceeded the limit for your plan.\n' + ('> See ' + _chalk2.default.underline('https://zeit.co/account') + ' to upgrade.'));
                    }
                  })();
                }

                if (!quiet && deployment.nodeVersion) {
                  if (engines && engines.node) {
                    if (missingVersion) {
                      console.log('> Using Node.js ' + _chalk2.default.bold(deployment.nodeVersion) + ' (default)');
                    } else {
                      console.log('> Using Node.js ' + _chalk2.default.bold(deployment.nodeVersion) + ' (requested: ' + _chalk2.default.dim('`' + engines.node + '`') + ')');
                    }
                  } else {
                    console.log('> Using Node.js ' + _chalk2.default.bold(deployment.nodeVersion) + ' (default)');
                  }
                }

                this._id = deployment.deploymentId;
                this._host = deployment.url;
                this._missing = deployment.missing || [];

                return _context2.abrupt('return', this._url);

              case 66:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[25, 33], [36, 44]]);
      }));

      function create(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: 'pathInsideContent',
    value: function pathInsideContent(position) {
      var relativePath = toRelative(position, this._path);
      var contentDir = (0, _path.join)(this._path, 'content');
      var newPath = (0, _path.join)(contentDir, relativePath);

      return newPath;
    }
  }, {
    key: 'upload',
    value: function upload() {
      var _this3 = this;

      var parts = (0, _splitArray2.default)(this._missing, MAX_CONCURRENT);

      if (this._debug) {
        console.log('> [debug] Will upload ' + (this._missing.length + ' files in ' + parts.length + ' ') + ('steps of ' + MAX_CONCURRENT + ' uploads.'));
      }

      var uploadChunk = function uploadChunk() {
        _promise2.default.all(parts.shift().map(function (sha) {
          return (0, _asyncRetry2.default)(function () {
            var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(bail, attempt) {
              var file, data, names, stream, res;
              return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      file = _this3._files.get(sha);
                      data = file.data, names = file.names;


                      if (_this3._debug) {
                        console.time('> [debug] /sync #' + attempt + ' ' + names.join(' '));
                      }

                      stream = (0, _resumer2.default)().queue(data).end();
                      _context3.next = 6;
                      return _this3._fetch('/now/sync', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/octet-stream',
                          'Content-Length': data.length,
                          'x-now-deployment-id': _this3._id,
                          'x-now-sha': sha,
                          'x-now-file': names.map(function (name) {
                            if (_this3._static) {
                              name = _this3.pathInsideContent(name);
                            }

                            return toRelative(encodeURIComponent(name), _this3._path);
                          }).join(','),
                          'x-now-size': data.length
                        },
                        body: stream
                      });

                    case 6:
                      res = _context3.sent;


                      if (_this3._debug) {
                        console.timeEnd('> [debug] /sync #' + attempt + ' ' + names.join(' '));
                      }

                      // no retry on 4xx

                      if (!(res.status !== 200 && (res.status >= 400 || res.status < 500))) {
                        _context3.next = 11;
                        break;
                      }

                      if (_this3._debug) {
                        console.log('> [debug] bailing on creating due to %s', res.status);
                      }

                      return _context3.abrupt('return', bail(responseError(res)));

                    case 11:

                      _this3.emit('upload', file);

                    case 12:
                    case 'end':
                      return _context3.stop();
                  }
                }
              }, _callee3, _this3);
            }));

            return function (_x4, _x5) {
              return _ref8.apply(this, arguments);
            };
          }(), { retries: 3, randomize: true, onRetry: _this3._onRetry });
        })).then(function () {
          return parts.length ? uploadChunk() : _this3.emit('complete');
        }).catch(function (err) {
          return _this3.emit('error', err);
        });
      };

      uploadChunk();
    }
  }, {
    key: 'listSecrets',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
        var _this4 = this;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', this.retry(function () {
                  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(bail, attempt) {
                    var res, body;
                    return _regenerator2.default.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            if (_this4._debug) {
                              console.time('> [debug] #' + attempt + ' GET /secrets');
                            }

                            _context4.next = 3;
                            return _this4._fetch('/now/secrets');

                          case 3:
                            res = _context4.sent;


                            if (_this4._debug) {
                              console.timeEnd('> [debug] #' + attempt + ' GET /secrets');
                            }

                            _context4.next = 7;
                            return res.json();

                          case 7:
                            body = _context4.sent;
                            return _context4.abrupt('return', body.secrets);

                          case 9:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this4);
                  }));

                  return function (_x6, _x7) {
                    return _ref10.apply(this, arguments);
                  };
                }()));

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function listSecrets() {
        return _ref9.apply(this, arguments);
      }

      return listSecrets;
    }()
  }, {
    key: 'list',
    value: function () {
      var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(app) {
        var _this5 = this;

        var query, _ref12, deployments;

        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                query = app ? '?app=' + encodeURIComponent(app) : '';
                _context7.next = 3;
                return this.retry(function () {
                  var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(bail) {
                    var res;
                    return _regenerator2.default.wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            if (_this5._debug) {
                              console.time('> [debug] /list');
                            }

                            _context6.next = 3;
                            return _this5._fetch('/now/list' + query);

                          case 3:
                            res = _context6.sent;


                            if (_this5._debug) {
                              console.timeEnd('> [debug] /list');
                            }

                            // no retry on 4xx

                            if (!(res.status >= 400 && res.status < 500)) {
                              _context6.next = 8;
                              break;
                            }

                            if (_this5._debug) {
                              console.log('> [debug] bailing on listing due to %s', res.status);
                            }
                            return _context6.abrupt('return', bail(responseError(res)));

                          case 8:
                            if (!(res.status !== 200)) {
                              _context6.next = 10;
                              break;
                            }

                            throw new Error('Fetching deployment list failed');

                          case 10:
                            return _context6.abrupt('return', res.json());

                          case 11:
                          case 'end':
                            return _context6.stop();
                        }
                      }
                    }, _callee6, _this5);
                  }));

                  return function (_x9) {
                    return _ref13.apply(this, arguments);
                  };
                }(), { retries: 3, minTimeout: 2500, onRetry: this._onRetry });

              case 3:
                _ref12 = _context7.sent;
                deployments = _ref12.deployments;
                return _context7.abrupt('return', deployments);

              case 6:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function list(_x8) {
        return _ref11.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: 'listAliases',
    value: function () {
      var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(deploymentId) {
        var _this6 = this;

        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt('return', this.retry((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
                  var res, body;
                  return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return _this6._fetch(deploymentId ? '/now/deployments/' + deploymentId + '/aliases' : '/now/aliases');

                        case 2:
                          res = _context8.sent;
                          _context8.next = 5;
                          return res.json();

                        case 5:
                          body = _context8.sent;
                          return _context8.abrupt('return', body.aliases);

                        case 7:
                        case 'end':
                          return _context8.stop();
                      }
                    }
                  }, _callee8, _this6);
                }))));

              case 1:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function listAliases(_x10) {
        return _ref14.apply(this, arguments);
      }

      return listAliases;
    }()
  }, {
    key: 'last',
    value: function () {
      var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(app) {
        var deployments, last, e;
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.list(app);

              case 2:
                deployments = _context10.sent;
                last = deployments.sort(function (a, b) {
                  return b.created - a.created;
                }).shift();

                if (last) {
                  _context10.next = 8;
                  break;
                }

                e = Error('No deployments found for "' + app + '"');

                e.userError = true;
                throw e;

              case 8:
                return _context10.abrupt('return', last);

              case 9:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function last(_x11) {
        return _ref16.apply(this, arguments);
      }

      return last;
    }()
  }, {
    key: 'listDomains',
    value: function () {
      var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
        var _this7 = this;

        return _regenerator2.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt('return', this.retry(function () {
                  var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(bail, attempt) {
                    var res, body;
                    return _regenerator2.default.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            if (_this7._debug) {
                              console.time('> [debug] #' + attempt + ' GET /domains');
                            }

                            _context11.next = 3;
                            return _this7._fetch('/domains');

                          case 3:
                            res = _context11.sent;


                            if (_this7._debug) {
                              console.timeEnd('> [debug] #' + attempt + ' GET /domains');
                            }

                            _context11.next = 7;
                            return res.json();

                          case 7:
                            body = _context11.sent;
                            return _context11.abrupt('return', body.domains);

                          case 9:
                          case 'end':
                            return _context11.stop();
                        }
                      }
                    }, _callee11, _this7);
                  }));

                  return function (_x12, _x13) {
                    return _ref18.apply(this, arguments);
                  };
                }()));

              case 1:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function listDomains() {
        return _ref17.apply(this, arguments);
      }

      return listDomains;
    }()
  }, {
    key: 'getDomain',
    value: function () {
      var _ref19 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(domain) {
        var _this8 = this;

        return _regenerator2.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                return _context14.abrupt('return', this.retry(function () {
                  var _ref20 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(bail, attempt) {
                    var res;
                    return _regenerator2.default.wrap(function _callee13$(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            if (_this8._debug) {
                              console.time('> [debug] #' + attempt + ' GET /domains/' + domain);
                            }

                            _context13.next = 3;
                            return _this8._fetch('/domains/' + domain);

                          case 3:
                            res = _context13.sent;


                            if (_this8._debug) {
                              console.timeEnd('> [debug] #' + attempt + ' GET /domains/' + domain);
                            }

                            _context13.next = 7;
                            return res.json();

                          case 7:
                            return _context13.abrupt('return', _context13.sent);

                          case 8:
                          case 'end':
                            return _context13.stop();
                        }
                      }
                    }, _callee13, _this8);
                  }));

                  return function (_x15, _x16) {
                    return _ref20.apply(this, arguments);
                  };
                }()));

              case 1:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getDomain(_x14) {
        return _ref19.apply(this, arguments);
      }

      return getDomain;
    }()
  }, {
    key: 'getNameservers',
    value: function getNameservers(domain) {
      var _this9 = this;

      return new _promise2.default(function (resolve, reject) {
        var fallback = false;

        _this9.retry(function () {
          var _ref21 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(bail, attempt) {
            var res, body;
            return _regenerator2.default.wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    if (_this9._debug) {
                      console.time('> [debug] #' + attempt + ' GET /whois-ns' + (fallback ? '-fallback' : ''));
                    }

                    _context15.next = 3;
                    return _this9._fetch('/whois-ns' + (fallback ? '-fallback' : '') + '?domain=' + encodeURIComponent(domain));

                  case 3:
                    res = _context15.sent;


                    if (_this9._debug) {
                      console.timeEnd('> [debug] #' + attempt + ' GET /whois-ns' + (fallback ? '-fallback' : ''));
                    }

                    _context15.next = 7;
                    return res.json();

                  case 7:
                    body = _context15.sent;

                    if (!(res.status === 200)) {
                      _context15.next = 13;
                      break;
                    }

                    if (!((!body.nameservers || body.nameservers.length === 0) && !fallback)) {
                      _context15.next = 12;
                      break;
                    }

                    // if the nameservers are `null` it's likely
                    // that our whois service failed to parse it
                    fallback = true;
                    throw new Error('Invalid whois response');

                  case 12:
                    return _context15.abrupt('return', body);

                  case 13:

                    if (attempt > 1) {
                      fallback = true;
                    }

                    throw new Error('Whois error (' + res.status + '): ' + body.error.message);

                  case 15:
                  case 'end':
                    return _context15.stop();
                }
              }
            }, _callee15, _this9);
          }));

          return function (_x17, _x18) {
            return _ref21.apply(this, arguments);
          };
        }()).then(function (body) {
          body.nameservers = body.nameservers.filter(function (ns) {
            // temporary hack:
            // sometimes we get a response that looks like:
            // ['ns', 'ns', '', '']
            // so we filter the empty ones
            return ns.length;
          });
          resolve(body);
        }).catch(function (err) {
          reject(err);
        });
      });
    }

    // _ensures_ the domain is setup (idempotent)

  }, {
    key: 'setupDomain',
    value: function setupDomain(name) {
      var _this10 = this;

      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          isExternal = _ref22.isExternal;

      return this.retry(function () {
        var _ref23 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(bail, attempt) {
          var res, body, code, err;
          return _regenerator2.default.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  if (_this10._debug) {
                    console.time('> [debug] #' + attempt + ' POST /domains');
                  }

                  _context16.next = 3;
                  return _this10._fetch('/domains', {
                    method: 'POST',
                    body: { name: name, isExternal: Boolean(isExternal) }
                  });

                case 3:
                  res = _context16.sent;


                  if (_this10._debug) {
                    console.timeEnd('> [debug] #' + attempt + ' POST /domains');
                  }

                  _context16.next = 7;
                  return res.json();

                case 7:
                  body = _context16.sent;

                  if (!(res.status === 403)) {
                    _context16.next = 14;
                    break;
                  }

                  code = body.error.code;
                  err = void 0;


                  if (code === 'custom_domain_needs_upgrade') {
                    err = new Error('Custom domains are only enabled for premium accounts. Please upgrade at ' + _chalk2.default.underline('https://zeit.co/account') + '.');
                  } else {
                    err = new Error('Not authorized to access domain ' + name);
                  }

                  err.userError = true;
                  return _context16.abrupt('return', bail(err));

                case 14:
                  if (!(res.status === 409)) {
                    _context16.next = 17;
                    break;
                  }

                  if (_this10._debug) {
                    console.log('> [debug] Domain already exists (noop)');
                  }

                  return _context16.abrupt('return', { uid: body.error.uid, code: body.error.code });

                case 17:
                  if (!(res.status !== 200)) {
                    _context16.next = 19;
                    break;
                  }

                  throw new Error(body.error.message);

                case 19:
                  return _context16.abrupt('return', body);

                case 20:
                case 'end':
                  return _context16.stop();
              }
            }
          }, _callee16, _this10);
        }));

        return function (_x20, _x21) {
          return _ref23.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'createCert',
    value: function createCert(domain) {
      var _this11 = this;

      var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          renew = _ref24.renew;

      return this.retry(function () {
        var _ref25 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(bail, attempt) {
          var res, body, code, err, _err;

          return _regenerator2.default.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  if (_this11._debug) {
                    console.time('> [debug] /now/certs #' + attempt);
                  }

                  _context17.next = 3;
                  return _this11._fetch('/now/certs', {
                    method: 'POST',
                    body: {
                      domains: [domain],
                      renew: renew
                    }
                  });

                case 3:
                  res = _context17.sent;

                  if (!(res.status === 304)) {
                    _context17.next = 7;
                    break;
                  }

                  console.log('> Certificate already issued.');
                  return _context17.abrupt('return');

                case 7:
                  _context17.next = 9;
                  return res.json();

                case 9:
                  body = _context17.sent;


                  if (_this11._debug) {
                    console.timeEnd('> [debug] /now/certs #' + attempt);
                  }

                  if (!body.error) {
                    _context17.next = 24;
                    break;
                  }

                  code = body.error.code;

                  if (!(code === 'verification_failed')) {
                    _context17.next = 19;
                    break;
                  }

                  err = new Error('The certificate issuer failed to verify ownership of the domain. ' + 'This likely has to do with DNS propagation and caching issues. Please retry later!');

                  err.userError = true;
                  // retry
                  throw err;

                case 19:
                  if (!(code === 'rate_limited')) {
                    _context17.next = 23;
                    break;
                  }

                  _err = new Error(body.error.message);

                  _err.userError = true;
                  // dont retry
                  return _context17.abrupt('return', bail(_err));

                case 23:
                  throw new Error(body.error.message);

                case 24:
                  if (!(res.status !== 200 && res.status !== 304)) {
                    _context17.next = 26;
                    break;
                  }

                  throw new Error('Unhandled error');

                case 26:
                  return _context17.abrupt('return', body);

                case 27:
                case 'end':
                  return _context17.stop();
              }
            }
          }, _callee17, _this11);
        }));

        return function (_x23, _x24) {
          return _ref25.apply(this, arguments);
        };
      }(), { retries: 5, minTimeout: 30000, maxTimeout: 90000 });
    }
  }, {
    key: 'deleteCert',
    value: function deleteCert(domain) {
      var _this12 = this;

      return this.retry(function () {
        var _ref26 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(bail, attempt) {
          var res, err;
          return _regenerator2.default.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  if (_this12._debug) {
                    console.time('> [debug] /now/certs #' + attempt);
                  }

                  _context18.next = 3;
                  return _this12._fetch('/now/certs/' + domain, {
                    method: 'DELETE'
                  });

                case 3:
                  res = _context18.sent;

                  if (!(res.status !== 200)) {
                    _context18.next = 10;
                    break;
                  }

                  err = new Error(res.body.error.message);

                  err.userError = false;

                  if (!(res.status === 400 || res.status === 404)) {
                    _context18.next = 9;
                    break;
                  }

                  return _context18.abrupt('return', bail(err));

                case 9:
                  throw err;

                case 10:
                case 'end':
                  return _context18.stop();
              }
            }
          }, _callee18, _this12);
        }));

        return function (_x25, _x26) {
          return _ref26.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'remove',
    value: function () {
      var _ref27 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee20(deploymentId, _ref28) {
        var _this13 = this;

        var hard = _ref28.hard;
        var data;
        return _regenerator2.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                data = { deploymentId: deploymentId, hard: hard };
                _context20.next = 3;
                return this.retry(function () {
                  var _ref29 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19(bail) {
                    var res;
                    return _regenerator2.default.wrap(function _callee19$(_context19) {
                      while (1) {
                        switch (_context19.prev = _context19.next) {
                          case 0:
                            if (_this13._debug) {
                              console.time('> [debug] /remove');
                            }

                            _context19.next = 3;
                            return _this13._fetch('/now/remove', {
                              method: 'DELETE',
                              body: data
                            });

                          case 3:
                            res = _context19.sent;


                            if (_this13._debug) {
                              console.timeEnd('> [debug] /remove');
                            }

                            // no retry on 4xx

                            if (!(res.status >= 400 && res.status < 500)) {
                              _context19.next = 8;
                              break;
                            }

                            if (_this13._debug) {
                              console.log('> [debug] bailing on removal due to %s', res.status);
                            }
                            return _context19.abrupt('return', bail(responseError(res)));

                          case 8:
                            if (!(res.status !== 200)) {
                              _context19.next = 10;
                              break;
                            }

                            throw new Error('Removing deployment failed');

                          case 10:
                          case 'end':
                            return _context19.stop();
                        }
                      }
                    }, _callee19, _this13);
                  }));

                  return function (_x29) {
                    return _ref29.apply(this, arguments);
                  };
                }());

              case 3:
                return _context20.abrupt('return', true);

              case 4:
              case 'end':
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function remove(_x27, _x28) {
        return _ref27.apply(this, arguments);
      }

      return remove;
    }()
  }, {
    key: 'retry',
    value: function retry(fn) {
      var _ref30 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref30$retries = _ref30.retries,
          retries = _ref30$retries === undefined ? 3 : _ref30$retries,
          _ref30$maxTimeout = _ref30.maxTimeout,
          maxTimeout = _ref30$maxTimeout === undefined ? Infinity : _ref30$maxTimeout;

      return (0, _asyncRetry2.default)(fn, {
        retries: retries,
        maxTimeout: maxTimeout,
        onRetry: this._onRetry
      });
    }
  }, {
    key: '_onRetry',
    value: function _onRetry(err) {
      if (this._debug) {
        console.log('> [debug] Retrying: ' + err.stack);
      }
    }
  }, {
    key: 'close',
    value: function close() {
      this._agent.close();
    }
  }, {
    key: '_fetch',
    value: function _fetch(_url) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      opts.headers = opts.headers || {};
      opts.headers.authorization = 'Bearer ' + this._token;
      opts.headers['user-agent'] = _ua2.default;
      return this._agent.fetch(_url, opts);
    }
  }, {
    key: 'id',
    get: function get() {
      return this._id;
    }
  }, {
    key: 'url',
    get: function get() {
      return 'https://' + this._host;
    }
  }, {
    key: 'host',
    get: function get() {
      return this._host;
    }
  }, {
    key: 'syncAmount',
    get: function get() {
      var _this14 = this;

      if (!this._syncAmount) {
        this._syncAmount = this._missing.map(function (sha) {
          return _this14._files.get(sha).data.length;
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
      }
      return this._syncAmount;
    }
  }]);
  return Now;
}(_events2.default);

exports.default = Now;


function toRelative(path, base) {
  var fullBase = base.endsWith(SEP) ? base : base + SEP;
  var relative = path.substr(fullBase.length);

  if (relative.startsWith(SEP)) {
    relative = relative.substr(1);
  }

  return relative.replace(/\\/g, '/');
}

function responseError(res) {
  var err = new Error('Response error');
  err.status = res.status;

  if (res.status === 429) {
    var retryAfter = res.headers.get('Retry-After');
    if (retryAfter) {
      err.retryAfter = parseInt(retryAfter, 10);
    }
  }

  return err;
}