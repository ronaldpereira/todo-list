'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _crypto = require('crypto');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsPromise = require('fs-promise');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Computes hashes for the contents of each file given.
 *
 * @param {Array} of {String} full paths
 * @return {Map}
 */

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(files, isStatic, pkg) {
    var _this = this;

    var map;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            map = new _map2.default();
            _context2.next = 3;
            return _promise2.default.all(files.map(function () {
              var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(name) {
                var filename, data, packageString, h, entry;
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        filename = _path2.default.basename(name);
                        data = void 0;

                        if (!(isStatic && filename === 'package.json')) {
                          _context.next = 7;
                          break;
                        }

                        packageString = (0, _stringify2.default)(pkg, null, 2);

                        data = Buffer.from(packageString);
                        _context.next = 10;
                        break;

                      case 7:
                        _context.next = 9;
                        return (0, _fsPromise.readFile)(name);

                      case 9:
                        data = _context.sent;

                      case 10:
                        h = hash(data);
                        entry = map.get(h);

                        if (entry) {
                          entry.names.push(name);
                        } else {
                          map.set(hash(data), { names: [name], data: data });
                        }

                      case 13:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, _this);
              }));

              return function (_x4) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 3:
            return _context2.abrupt('return', map);

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function hashes(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }

  return hashes;
}();

/**
 * Computes a hash for the given buf.
 *
 * @param {Buffer} file data
 * @return {String} hex digest
 */

// Packages
// Native


function hash(buf) {
  return (0, _crypto.createHash)('sha1').update(buf).digest('hex');
}