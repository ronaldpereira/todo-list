'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.default = checkUpdate;

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _semverCompare = require('semver-compare');

var _semverCompare2 = _interopRequireDefault(_semverCompare);

var _package = require('../../package');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isTTY = process.stdout.isTTY;

// if we're not in a tty the update checker
// will always return a resolved promise


// Ours
// Packages
var resolvedPromise = new _promise2.default(function (resolve) {
  return resolve();
});

/**
 * Configures auto updates.
 * Sets up a `exit` listener to report them.
 */

function checkUpdate() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!isTTY) {
    // don't attempt to check for updates
    // if the user is piping or redirecting
    return resolvedPromise;
  }

  var updateData = void 0;

  var update = check(opts).then(function (data) {
    updateData = data;

    // forces the `exit` event upon Ctrl + C
    process.on('SIGINT', function () {
      // clean up output after ^C
      process.stdout.write('\n');
      process.exit(1);
    });
  }, function (err) {
    return console.error(err.stack);
  });

  process.on('exit', function () {
    if (updateData) {
      var _updateData = updateData,
          current = _updateData.current,
          latest = _updateData.latest,
          at = _updateData.at;

      var ago = (0, _ms2.default)(Date.now() - at);
      console.log('> ' + _chalk2.default.white.bgRed('UPDATE NEEDED') + ' ' + ('Current: ' + current + ' \u2013 ') + ('Latest ' + _chalk2.default.bold(latest) + ' (released ' + ago + ' ago)'));
      console.log('> Run `npm install -g now` to update');
    }
  });

  return update;
}

function check(_ref) {
  var _ref$debug = _ref.debug,
      debug = _ref$debug === undefined ? false : _ref$debug;

  return new _promise2.default(function (resolve) {
    if (debug) {
      console.log('> [debug] Checking for updates.');
    }

    (0, _nodeFetch2.default)('https://registry.npmjs.org/now').then(function (res) {
      if (res.status !== 200) {
        if (debug) {
          console.log('> [debug] Update check error. NPM ' + res.status + '.');
        }

        resolve(false);
        return;
      }

      res.json().then(function (data) {
        var latest = data['dist-tags'].latest;

        var current = _package2.default.version;

        if ((0, _semverCompare2.default)(latest, _package2.default.version) === 1) {
          if (debug) {
            console.log('> [debug] Needs update. Current ' + current + ', latest ' + latest);
          }

          resolve({
            latest: latest,
            current: current,
            at: new Date(data.time[latest])
          });
        } else {
          if (debug) {
            console.log('> [debug] Up to date (' + _package2.default.version + ').');
          }

          resolve(false);
        }
      }, function () {
        return resolve(false);
      });
    }, function () {
      return resolve(false);
    });
  });
}