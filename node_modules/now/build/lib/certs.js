'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Certs = function (_Now) {
  (0, _inherits3.default)(Certs, _Now);

  function Certs() {
    (0, _classCallCheck3.default)(this, Certs);
    return (0, _possibleConstructorReturn3.default)(this, (Certs.__proto__ || (0, _getPrototypeOf2.default)(Certs)).apply(this, arguments));
  }

  (0, _createClass3.default)(Certs, [{
    key: 'ls',
    value: function ls() {
      var _this2 = this;

      return this.retry(function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(bail, attempt) {
          var res, body;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (_this2._debug) {
                    console.time('> [debug] #' + attempt + ' GET now/certs');
                  }

                  _context.next = 3;
                  return _this2._fetch('/now/certs');

                case 3:
                  res = _context.sent;


                  if (_this2._debug) {
                    console.timeEnd('> [debug] #' + attempt + ' GET now/certs');
                  }

                  _context.next = 7;
                  return res.json();

                case 7:
                  body = _context.sent;
                  return _context.abrupt('return', body.certs);

                case 9:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this2);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'create',
    value: function create(cn) {
      return this.createCert(cn);
    }
  }, {
    key: 'renew',
    value: function renew(cn) {
      return this.createCert(cn, { renew: true });
    }
  }, {
    key: 'put',
    value: function put(cn, crt, key, ca) {
      var _this3 = this;

      return this.retry(function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(bail, attempt) {
          var res, body, err;
          return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (_this3._debug) {
                    console.time('> [debug] #' + attempt + ' PUT now/certs');
                  }

                  _context2.next = 3;
                  return _this3._fetch('/now/certs', {
                    method: 'PUT',
                    body: {
                      domains: [cn],
                      ca: ca,
                      cert: crt,
                      key: key
                    }
                  });

                case 3:
                  res = _context2.sent;


                  if (_this3._debug) {
                    console.timeEnd('> [debug] #' + attempt + ' PUT now/certs');
                  }

                  if (!(res.status === 403)) {
                    _context2.next = 7;
                    break;
                  }

                  return _context2.abrupt('return', bail(new Error('Unauthorized')));

                case 7:
                  _context2.next = 9;
                  return res.json();

                case 9:
                  body = _context2.sent;

                  if (!(res.status !== 200)) {
                    _context2.next = 16;
                    break;
                  }

                  if (!(res.status === 404 || res.status === 400)) {
                    _context2.next = 15;
                    break;
                  }

                  err = new Error(body.error.message);

                  err.userError = true;
                  return _context2.abrupt('return', bail(err));

                case 15:
                  throw new Error(body.error.message);

                case 16:
                  return _context2.abrupt('return', body);

                case 17:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, _this3);
        }));

        return function (_x3, _x4) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'delete',
    value: function _delete(cn) {
      var _this4 = this;

      return this.retry(function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(bail, attempt) {
          var res, body, err;
          return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (_this4._debug) {
                    console.time('> [debug] #' + attempt + ' DELETE now/certs/' + cn);
                  }

                  _context3.next = 3;
                  return _this4._fetch('/now/certs/' + cn, { method: 'DELETE' });

                case 3:
                  res = _context3.sent;


                  if (_this4._debug) {
                    console.timeEnd('> [debug] #' + attempt + ' DELETE now/certs/' + cn);
                  }

                  if (!(res.status === 403)) {
                    _context3.next = 7;
                    break;
                  }

                  return _context3.abrupt('return', bail(new Error('Unauthorized')));

                case 7:
                  _context3.next = 9;
                  return res.json();

                case 9:
                  body = _context3.sent;

                  if (!(res.status !== 200)) {
                    _context3.next = 16;
                    break;
                  }

                  if (!(res.status === 404 || res.status === 400)) {
                    _context3.next = 15;
                    break;
                  }

                  err = new Error(body.error.message);

                  err.userError = true;
                  return _context3.abrupt('return', bail(err));

                case 15:
                  throw new Error(body.error.message);

                case 16:
                  return _context3.abrupt('return', body);

                case 17:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, _this4);
        }));

        return function (_x5, _x6) {
          return _ref3.apply(this, arguments);
        };
      }());
    }
  }]);
  return Certs;
}(_lib2.default); // Ours


exports.default = Certs;