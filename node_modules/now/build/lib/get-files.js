'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.docker = exports.npm = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Returns a list of files in the given
 * directory that are subject to be
 * synchronized for npm.
 *
 * @param {String} full path to directory
 * @param {String} contents of `package.json` to avoid lookup
 * @param {Object} options:
 *  - `limit` {Number|null} byte limit
 *  - `debug` {Boolean} warn upon ignore
 * @return {Array} comprehensive list of paths to sync
 */

// Packages
var npm = exports.npm = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(path, pkg) {
    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$limit = _ref2.limit,
        limit = _ref2$limit === undefined ? null : _ref2$limit,
        _ref2$debug = _ref2.debug,
        debug = _ref2$debug === undefined ? false : _ref2$debug;

    var whitelist, search_, search, npmIgnore, filter, prefixLength, accepts, files;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            whitelist = pkg.now && pkg.now.files ? pkg.now.files : pkg.files;

            // the package.json `files` whitelist still
            // honors ignores: https://docs.npmjs.com/files/package.json#files

            search_ = whitelist || ['.'];

            // always include the "main" file

            if (pkg.main) {
              search_.push(pkg.main);
            }

            // convert all filenames into absolute paths
            _context.t0 = Array.prototype.concat;
            _context.t1 = [];
            _context.next = 7;
            return _promise2.default.all(search_.map(function (file) {
              return glob(file, { cwd: path, absolute: true, dot: true });
            }));

          case 7:
            _context.t2 = _context.sent;
            search = _context.t0.apply.call(_context.t0, _context.t1, _context.t2);
            _context.next = 11;
            return maybeRead((0, _path.resolve)(path, '.npmignore'), null);

          case 11:
            npmIgnore = _context.sent;
            _context.t3 = (0, _ignore2.default)();
            _context.t4 = _ignored2.default + '\n';

            if (!(npmIgnore === null)) {
              _context.next = 20;
              break;
            }

            _context.next = 17;
            return maybeRead((0, _path.resolve)(path, '.gitignore'));

          case 17:
            _context.t5 = _context.sent;
            _context.next = 21;
            break;

          case 20:
            _context.t5 = npmIgnore;

          case 21:
            _context.t6 = _context.t5;
            _context.t7 = clearRelative(_context.t6);
            _context.t8 = _context.t4 + _context.t7;
            filter = _context.t3.add.call(_context.t3, _context.t8).createFilter();
            prefixLength = path.length + 1;

            accepts = function accepts(file) {
              var relativePath = file.substr(prefixLength);

              if (relativePath === '') {
                return true;
              }

              var accepted = filter(relativePath);
              if (!accepted && debug) {
                console.log('> [debug] ignoring "%s"', file);
              }
              return accepted;
            };

            // locate files


            if (debug) {
              console.time('> [debug] locating files ' + path);
            }

            _context.next = 30;
            return explode(search, {
              accepts: accepts,
              limit: limit,
              debug: debug
            });

          case 30:
            files = _context.sent;


            if (debug) {
              console.timeEnd('> [debug] locating files ' + path);
            }

            // always include manifest as npm does not allow ignoring it
            // source: https://docs.npmjs.com/files/package.json#files
            files.push(asAbsolute('package.json', path));

            // get files
            return _context.abrupt('return', (0, _arrayUnique2.default)(files));

          case 34:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function npm(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Transform relative paths into absolutes,
 * and maintains absolutes as such.
 *
 * @param {String} maybe relative path
 * @param {String} parent full path
 */

// Ours
// Native


/**
 * Returns a list of files in the given
 * directory that are subject to be
 * sent to docker as build context.
 *
 * @param {String} full path to directory
 * @param {String} contents of `Dockerfile`
 * @param {Object} options:
 *  - `limit` {Number|null} byte limit
 *  - `debug` {Boolean} warn upon ignore
 * @return {Array} comprehensive list of paths to sync
 */

var docker = exports.docker = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(path) {
    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref4$limit = _ref4.limit,
        limit = _ref4$limit === undefined ? null : _ref4$limit,
        _ref4$debug = _ref4.debug,
        debug = _ref4$debug === undefined ? false : _ref4$debug;

    var search_, search, filter, prefixLength, accepts, files;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // base search path
            search_ = ['.'];

            // convert all filenames into absolute paths

            search = search_.map(function (file) {
              return asAbsolute(file, path);
            });

            // compile list of ignored patterns and files

            _context2.t0 = (0, _ignore2.default)();
            _context2.t1 = _ignored2.default + '\n';
            _context2.next = 6;
            return maybeRead((0, _path.resolve)(path, '.dockerignore'));

          case 6:
            _context2.t2 = _context2.sent;
            _context2.t3 = _context2.t1 + _context2.t2;
            filter = _context2.t0.add.call(_context2.t0, _context2.t3).createFilter();
            prefixLength = path.length + 1;

            accepts = function accepts(file) {
              var relativePath = file.substr(prefixLength);

              if (relativePath === '') {
                return true;
              }

              var accepted = filter(relativePath);
              if (!accepted && debug) {
                console.log('> [debug] ignoring "%s"', file);
              }
              return accepted;
            };

            // locate files


            if (debug) {
              console.time('> [debug] locating files ' + path);
            }

            _context2.next = 14;
            return explode(search, { accepts: accepts, limit: limit, debug: debug });

          case 14:
            files = _context2.sent;


            if (debug) {
              console.timeEnd('> [debug] locating files ' + path);
            }

            // always include manifest as npm does not allow ignoring it
            // source: https://docs.npmjs.com/files/package.json#files
            files.push(asAbsolute('Dockerfile', path));

            // get files
            return _context2.abrupt('return', (0, _arrayUnique2.default)(files));

          case 18:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function docker(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

var _path = require('path');

var _arrFlatten = require('arr-flatten');

var _arrFlatten2 = _interopRequireDefault(_arrFlatten);

var _arrayUnique = require('array-unique');

var _arrayUnique2 = _interopRequireDefault(_arrayUnique);

var _ignore = require('ignore');

var _ignore2 = _interopRequireDefault(_ignore);

var _glob2 = require('glob');

var _glob3 = _interopRequireDefault(_glob2);

var _fsPromise = require('fs-promise');

var _ignored = require('./ignored');

var _ignored2 = _interopRequireDefault(_ignored);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var asAbsolute = function asAbsolute(path, parent) {
  if (path[0] === '/') {
    return path;
  }

  return (0, _path.resolve)(parent, path);
};

var glob = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(pattern, options) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt('return', new _promise2.default(function (resolve, reject) {
              (0, _glob3.default)(pattern, options, function (error, files) {
                if (error) {
                  reject(error);
                } else {
                  resolve(files);
                }
              });
            }));

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function glob(_x8, _x9) {
    return _ref5.apply(this, arguments);
  };
}();

/**
 * Explodes directories into a full list of files.
 * Eg:
 *   in:  ['/a.js', '/b']
 *   out: ['/a.js', '/b/c.js', '/b/d.js']
 *
 * @param {Array} of {String}s representing paths
 * @param {Array} of ignored {String}s.
 * @param {Object} options:
 *  - `limit` {Number|null} byte limit
 *  - `debug` {Boolean} warn upon ignore
 * @return {Array} of {String}s of full paths
 */

var explode = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(paths, _ref7) {
    var _this = this;

    var accepts = _ref7.accepts,
        debug = _ref7.debug;
    var list, many;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            list = function () {
              var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(file) {
                var path, s, all;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        path = file;
                        s = void 0;

                        if (accepts(file)) {
                          _context4.next = 4;
                          break;
                        }

                        return _context4.abrupt('return', null);

                      case 4:
                        _context4.prev = 4;
                        _context4.next = 7;
                        return (0, _fsPromise.stat)(path);

                      case 7:
                        s = _context4.sent;
                        _context4.next = 23;
                        break;

                      case 10:
                        _context4.prev = 10;
                        _context4.t0 = _context4['catch'](4);

                        // in case the file comes from `files` or `main`
                        // and it wasn't specified with `.js` by the user
                        path = file + '.js';

                        _context4.prev = 13;
                        _context4.next = 16;
                        return (0, _fsPromise.stat)(path);

                      case 16:
                        s = _context4.sent;
                        _context4.next = 23;
                        break;

                      case 19:
                        _context4.prev = 19;
                        _context4.t1 = _context4['catch'](13);

                        if (debug) {
                          console.log('> [debug] ignoring invalid file "%s"', file);
                        }
                        return _context4.abrupt('return', null);

                      case 23:
                        if (!s.isDirectory()) {
                          _context4.next = 30;
                          break;
                        }

                        _context4.next = 26;
                        return (0, _fsPromise.readdir)(file);

                      case 26:
                        all = _context4.sent;
                        return _context4.abrupt('return', many(all.map(function (subdir) {
                          return asAbsolute(subdir, file);
                        })));

                      case 30:
                        if (s.isFile()) {
                          _context4.next = 33;
                          break;
                        }

                        if (debug) {
                          console.log('> [debug] ignoring special file "%s"', file);
                        }
                        return _context4.abrupt('return', null);

                      case 33:
                        return _context4.abrupt('return', path);

                      case 34:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this, [[4, 10], [13, 19]]);
              }));

              return function list(_x12) {
                return _ref8.apply(this, arguments);
              };
            }();

            many = function () {
              var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(all) {
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return _promise2.default.all(all.map(function () {
                          var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(file) {
                            return _regenerator2.default.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    _context5.next = 2;
                                    return list(file);

                                  case 2:
                                    return _context5.abrupt('return', _context5.sent);

                                  case 3:
                                  case 'end':
                                    return _context5.stop();
                                }
                              }
                            }, _callee5, _this);
                          }));

                          return function (_x14) {
                            return _ref10.apply(this, arguments);
                          };
                        }()));

                      case 2:
                        return _context6.abrupt('return', _context6.sent);

                      case 3:
                      case 'end':
                        return _context6.stop();
                    }
                  }
                }, _callee6, _this);
              }));

              return function many(_x13) {
                return _ref9.apply(this, arguments);
              };
            }();

            _context7.next = 4;
            return many(paths);

          case 4:
            _context7.t0 = _context7.sent;

            _context7.t1 = function (v) {
              return v !== null;
            };

            return _context7.abrupt('return', (0, _arrFlatten2.default)(_context7.t0).filter(_context7.t1));

          case 7:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function explode(_x10, _x11) {
    return _ref6.apply(this, arguments);
  };
}();

/**
 * Returns the contents of a file if it exists.
 *
 * @return {String} results or `''`
 */

var maybeRead = function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(path) {
    var default_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.prev = 0;
            _context8.next = 3;
            return (0, _fsPromise.readFile)(path, 'utf8');

          case 3:
            return _context8.abrupt('return', _context8.sent);

          case 6:
            _context8.prev = 6;
            _context8.t0 = _context8['catch'](0);
            return _context8.abrupt('return', default_);

          case 9:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this, [[0, 6]]);
  }));

  return function maybeRead(_x15, _x16) {
    return _ref11.apply(this, arguments);
  };
}();

/**
 * Remove leading `./` from the beginning of ignores
 * because our parser doesn't like them :|
 */

var clearRelative = function clearRelative(str) {
  return str.replace(/(\n|^)\.\//g, '$1');
};