'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _psl = require('psl');

var _psl2 = _interopRequireDefault(_psl);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _toHost = require('./to-host');

var _toHost2 = _interopRequireDefault(_toHost);

var _dns = require('./dns');

var _dns2 = _interopRequireDefault(_dns);

var _isZeitWorld = require('./is-zeit-world');

var _isZeitWorld2 = _interopRequireDefault(_isZeitWorld);

var _errors = require('./errors');

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var domainRegex = /^((?=[a-z0-9-]{1,63}\.)(xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,63}$/;

// Ours
// Packages

var Alias = function (_Now) {
  (0, _inherits3.default)(Alias, _Now);

  function Alias() {
    (0, _classCallCheck3.default)(this, Alias);
    return (0, _possibleConstructorReturn3.default)(this, (Alias.__proto__ || (0, _getPrototypeOf2.default)(Alias)).apply(this, arguments));
  }

  (0, _createClass3.default)(Alias, [{
    key: 'ls',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(deployment) {
        var target, err;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!deployment) {
                  _context.next = 9;
                  break;
                }

                _context.next = 3;
                return this.findDeployment(deployment);

              case 3:
                target = _context.sent;

                if (target) {
                  _context.next = 8;
                  break;
                }

                err = new Error('Aliases not found by "' + deployment + '". Run ' + _chalk2.default.dim('`now alias ls`') + ' to see your aliases.');

                err.userError = true;
                throw err;

              case 8:
                return _context.abrupt('return', this.listAliases(target.uid));

              case 9:
                return _context.abrupt('return', this.listAliases());

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function ls(_x) {
        return _ref.apply(this, arguments);
      }

      return ls;
    }()
  }, {
    key: 'rm',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(_alias) {
        var _this2 = this;

        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt('return', this.retry(function () {
                  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(bail) {
                    var res, err;
                    return _regenerator2.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return _this2._fetch('/now/aliases/' + _alias.uid, {
                              method: 'DELETE'
                            });

                          case 2:
                            res = _context2.sent;

                            if (!(res.status === 403)) {
                              _context2.next = 5;
                              break;
                            }

                            return _context2.abrupt('return', bail(new Error('Unauthorized')));

                          case 5:
                            if (!(res.status !== 200)) {
                              _context2.next = 8;
                              break;
                            }

                            err = new Error('Deletion failed. Try again later.');
                            throw err;

                          case 8:
                          case 'end':
                            return _context2.stop();
                        }
                      }
                    }, _callee2, _this2);
                  }));

                  return function (_x3) {
                    return _ref3.apply(this, arguments);
                  };
                }()));

              case 1:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function rm(_x2) {
        return _ref2.apply(this, arguments);
      }

      return rm;
    }()
  }, {
    key: 'findDeployment',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(deployment) {
        var _this3 = this;

        var list, key, val, depl;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.list();

              case 2:
                list = _context4.sent;
                key = void 0;
                val = void 0;


                if (/\./.test(deployment)) {
                  val = (0, _toHost2.default)(deployment);
                  key = 'url';
                } else {
                  val = deployment;
                  key = 'uid';
                }

                depl = list.find(function (d) {
                  if (d[key] === val) {
                    if (_this3._debug) {
                      console.log('> [debug] matched deployment ' + d.uid + ' by ' + key + ' ' + val);
                    }

                    return true;
                  }

                  // match prefix
                  if (val + '.now.sh' === d.url) {
                    if (_this3._debug) {
                      console.log('> [debug] matched deployment ' + d.uid + ' by url ' + d.url);
                    }

                    return true;
                  }

                  return false;
                });
                return _context4.abrupt('return', depl);

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function findDeployment(_x4) {
        return _ref4.apply(this, arguments);
      }

      return findDeployment;
    }()
  }, {
    key: 'set',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(deployment, alias) {
        var _this4 = this;

        var depl, err, _err, _domain, _domainInfo, domainInfo, _ref6, domain, nameservers, usingZeitWorld, skipDNSVerification, e, record, _record, _domain2, _e, _ref7, _uid, verified, verifyToken, _created, _e2, newAlias, created, uid;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // make alias lowercase
                alias = alias.toLowerCase();

                // trim leading and trailing dots
                // for example: `google.com.` => `google.com`
                alias = alias.replace(/^\.+/, '').replace(/\.+$/, '');

                _context5.next = 4;
                return this.findDeployment(deployment);

              case 4:
                depl = _context5.sent;

                if (depl) {
                  _context5.next = 9;
                  break;
                }

                err = new Error('Deployment not found by "' + deployment + '". Run ' + _chalk2.default.dim('`now ls`') + ' to see your deployments.');

                err.userError = true;
                throw err;

              case 9:

                // evaluate the alias
                if (/\./.test(alias)) {
                  alias = (0, _toHost2.default)(alias);
                } else {
                  if (this._debug) {
                    console.log('> [debug] suffixing `.now.sh` to alias ' + alias);
                  }

                  alias = alias + '.now.sh';
                }

                if (domainRegex.test(alias)) {
                  _context5.next = 14;
                  break;
                }

                _err = new Error('Invalid alias "' + alias + '"');

                _err.userError = true;
                throw _err;

              case 14:
                if (/\.now\.sh$/.test(alias)) {
                  _context5.next = 109;
                  break;
                }

                console.log('> ' + _chalk2.default.bold(_chalk2.default.underline(alias)) + ' is a custom domain.');
                console.log('> Verifying the DNS settings for ' + _chalk2.default.bold(_chalk2.default.underline(alias)) + ' (see ' + _chalk2.default.underline('https://zeit.world') + ' for help)');

                _domain = _psl2.default.parse(alias).domain;
                _context5.next = 20;
                return this.getDomain(_domain);

              case 20:
                _domainInfo = _context5.sent;
                domainInfo = _domainInfo && !_domainInfo.error ? _domainInfo : undefined;

                if (!domainInfo) {
                  _context5.next = 26;
                  break;
                }

                _context5.t0 = { domain: _domain };
                _context5.next = 29;
                break;

              case 26:
                _context5.next = 28;
                return this.getNameservers(alias);

              case 28:
                _context5.t0 = _context5.sent;

              case 29:
                _ref6 = _context5.t0;
                domain = _ref6.domain;
                nameservers = _ref6.nameservers;
                usingZeitWorld = domainInfo ? !domainInfo.isExternal : (0, _isZeitWorld2.default)(nameservers);
                skipDNSVerification = false;


                if (this._debug) {
                  if (domainInfo) {
                    console.log('> [debug] Found domain ' + domain + ' with verified:' + domainInfo.verified);
                  } else {
                    console.log('> [debug] Found domain ' + domain + ' and nameservers ' + nameservers);
                  }
                }

                if (!(!usingZeitWorld && domainInfo)) {
                  _context5.next = 44;
                  break;
                }

                if (!domainInfo.verified) {
                  _context5.next = 40;
                  break;
                }

                skipDNSVerification = true;
                _context5.next = 44;
                break;

              case 40:
                if (!domainInfo.uid) {
                  _context5.next = 44;
                  break;
                }

                e = new Error('> The domain ' + domain + ' is already registered with now but additional verification is needed, please refer to \'now domain --help\'.');

                e.userError = true;
                throw e;

              case 44:
                _context5.prev = 44;

                if (skipDNSVerification) {
                  _context5.next = 48;
                  break;
                }

                _context5.next = 48;
                return this.verifyOwnership(alias);

              case 48:
                _context5.next = 91;
                break;

              case 50:
                _context5.prev = 50;
                _context5.t1 = _context5['catch'](44);

                if (!_context5.t1.userError) {
                  _context5.next = 90;
                  break;
                }

                _context5.prev = 53;

                if (!usingZeitWorld) {
                  _context5.next = 78;
                  break;
                }

                console.log('> Detected ' + _chalk2.default.bold(_chalk2.default.underline('zeit.world')) + ' nameservers! Configuring records.');
                record = alias.substr(0, alias.length - domain.length);

                // lean up trailing and leading dots

                _record = record.replace(/^\./, '').replace(/\.$/, '');
                _domain2 = domain.replace(/^\./, '').replace(/\.$/, '');

                if (!(_record === '')) {
                  _context5.next = 62;
                  break;
                }

                _context5.next = 62;
                return this.setupRecord(_domain2, '*');

              case 62:
                _context5.next = 64;
                return this.setupRecord(_domain2, _record);

              case 64:

                this.recordSetup = true;
                console.log('> DNS Configured! Verifying propagation…');

                _context5.prev = 66;
                _context5.next = 69;
                return this.retry(function () {
                  return _this4.verifyOwnership(alias);
                }, { retries: 10, maxTimeout: 8000 });

              case 69:
                _context5.next = 76;
                break;

              case 71:
                _context5.prev = 71;
                _context5.t2 = _context5['catch'](66);
                _e = new Error('> We configured the DNS settings for your alias, but we were unable to ' + 'verify that they\'ve propagated. Please try the alias again later.');

                _e.userError = true;
                throw _e;

              case 76:
                _context5.next = 81;
                break;

              case 78:
                console.log('> Resolved IP: ' + (_context5.t1.ip ? _chalk2.default.underline(_context5.t1.ip) + ' (unknown)' : _chalk2.default.dim('none')));
                console.log('> Nameservers: ' + (nameservers && nameservers.length ? nameservers.map(function (ns) {
                  return _chalk2.default.underline(ns);
                }).join(', ') : _chalk2.default.dim('none')));
                throw _context5.t1;

              case 81:
                _context5.next = 88;
                break;

              case 83:
                _context5.prev = 83;
                _context5.t3 = _context5['catch'](53);

                if (!_context5.t3.userError) {
                  _context5.next = 87;
                  break;
                }

                throw _context5.t3;

              case 87:
                throw _context5.t1;

              case 88:
                _context5.next = 91;
                break;

              case 90:
                throw _context5.t1;

              case 91:
                if (!(!usingZeitWorld && !skipDNSVerification)) {
                  _context5.next = 108;
                  break;
                }

                if (this._debug) {
                  console.log('> [debug] Trying to register a non-ZeitWorld domain ' + domain + ' for the current user');
                }

                _context5.next = 95;
                return this.setupDomain(domain, { isExternal: true });

              case 95:
                _ref7 = _context5.sent;
                _uid = _ref7.uid;
                verified = _ref7.verified;
                verifyToken = _ref7.verifyToken;
                _created = _ref7.created;

                if (!(_created && verified)) {
                  _context5.next = 104;
                  break;
                }

                console.log(_chalk2.default.cyan('> Success!') + ' Domain ' + _chalk2.default.bold(_chalk2.default.underline(domain)) + ' ' + _chalk2.default.dim('(' + _uid + ')') + ' added');
                _context5.next = 108;
                break;

              case 104:
                if (!verifyToken) {
                  _context5.next = 108;
                  break;
                }

                _e2 = new Error('> Verification required: Please add the following TXT record on the external DNS server: _now.' + domain + ': ' + verifyToken);

                _e2.userError = true;
                throw _e2;

              case 108:

                console.log('> Verification ' + _chalk2.default.bold('OK') + '!');

              case 109:

                // unfortunately there's a situation where the verification
                // ownership code path in the `catch` above makes the
                // agent unexpectedly close. this is a workaround until
                // we figure out what's going on with `node-spdy`
                this._agent.close();
                this._agent._initAgent();

                _context5.next = 113;
                return this.createAlias(depl, alias);

              case 113:
                newAlias = _context5.sent;

                if (newAlias) {
                  _context5.next = 116;
                  break;
                }

                throw new Error('Unexpected error occurred while setting up alias: ' + (0, _stringify2.default)(newAlias));

              case 116:
                created = newAlias.created, uid = newAlias.uid;

                if (created) {
                  console.log(_chalk2.default.cyan('> Success!') + ' Alias created ' + _chalk2.default.dim('(' + uid + ')') + ': ' + _chalk2.default.bold(_chalk2.default.underline('https://' + alias)) + ' now points to ' + _chalk2.default.bold('https://' + depl.url) + ' ' + _chalk2.default.dim('(' + depl.uid + ')'));
                } else {
                  console.log(_chalk2.default.cyan('> Success!') + ' Alias already exists ' + _chalk2.default.dim('(' + uid + ')') + '.');
                }

              case 118:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[44, 50], [53, 83], [66, 71]]);
      }));

      function set(_x5, _x6) {
        return _ref5.apply(this, arguments);
      }

      return set;
    }()
  }, {
    key: 'createAlias',
    value: function createAlias(depl, alias) {
      var _this5 = this;

      return this.retry(function () {
        var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(bail, attempt) {
          var res, body, code, err, _err2, _err3, _code;

          return _regenerator2.default.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (_this5._debug) {
                    console.time('> [debug] /now/deployments/' + depl.uid + '/aliases #' + attempt);
                  }

                  _context6.next = 3;
                  return _this5._fetch('/now/deployments/' + depl.uid + '/aliases', {
                    method: 'POST',
                    body: { alias: alias }
                  });

                case 3:
                  res = _context6.sent;
                  _context6.next = 6;
                  return res.json();

                case 6:
                  body = _context6.sent;

                  if (_this5._debug) {
                    console.timeEnd('> [debug] /now/deployments/' + depl.uid + '/aliases #' + attempt);
                  }

                  // 409 conflict is returned if it already exists

                  if (!(res.status === 409)) {
                    _context6.next = 10;
                    break;
                  }

                  return _context6.abrupt('return', { uid: body.error.uid });

                case 10:
                  if (!(res.status === 403)) {
                    _context6.next = 25;
                    break;
                  }

                  code = body.error.code;

                  if (!(code === 'custom_domain_needs_upgrade')) {
                    _context6.next = 16;
                    break;
                  }

                  err = new Error('Custom domains are only enabled for premium accounts. Please upgrade at ' + _chalk2.default.underline('https://zeit.co/account') + '.');

                  err.userError = true;
                  return _context6.abrupt('return', bail(err));

                case 16:
                  if (!(code === 'alias_in_use')) {
                    _context6.next = 20;
                    break;
                  }

                  _err2 = new Error('The alias you are trying to configure (' + _chalk2.default.underline(_chalk2.default.bold(alias)) + ') is already in use by a different account.');

                  _err2.userError = true;
                  return _context6.abrupt('return', bail(_err2));

                case 20:
                  if (!(code === 'forbidden')) {
                    _context6.next = 24;
                    break;
                  }

                  _err3 = new Error('The domain you are trying to use as an alias is already in use by a different account.');

                  _err3.userError = true;
                  return _context6.abrupt('return', bail(_err3));

                case 24:
                  return _context6.abrupt('return', bail(new Error('Authorization error')));

                case 25:
                  if (!body.error) {
                    _context6.next = 51;
                    break;
                  }

                  _code = body.error.code;

                  if (!(_code === 'deployment_not_found')) {
                    _context6.next = 29;
                    break;
                  }

                  return _context6.abrupt('return', bail(new Error('Deployment not found')));

                case 29:
                  if (!(_code === 'cert_missing')) {
                    _context6.next = 40;
                    break;
                  }

                  console.log('> Provisioning certificate for ' + _chalk2.default.underline(_chalk2.default.bold(alias)));

                  _context6.prev = 31;
                  _context6.next = 34;
                  return _this5.createCert(alias);

                case 34:
                  _context6.next = 39;
                  break;

                case 36:
                  _context6.prev = 36;
                  _context6.t0 = _context6['catch'](31);
                  return _context6.abrupt('return', bail(_context6.t0));

                case 39:
                  return _context6.abrupt('return', _this5.createAlias(depl, alias));

                case 40:
                  if (!(_code === 'cert_expired')) {
                    _context6.next = 50;
                    break;
                  }

                  console.log('> Renewing certificate for ' + _chalk2.default.underline(_chalk2.default.bold(alias)));

                  _context6.prev = 42;
                  _context6.next = 45;
                  return _this5.createCert(alias, { renew: true });

                case 45:
                  _context6.next = 50;
                  break;

                case 47:
                  _context6.prev = 47;
                  _context6.t1 = _context6['catch'](42);
                  return _context6.abrupt('return', bail(_context6.t1));

                case 50:
                  return _context6.abrupt('return', bail(new Error(body.error.message)));

                case 51:
                  if (!(res.status !== 200 && res.status !== 304)) {
                    _context6.next = 53;
                    break;
                  }

                  throw new Error('Unhandled error');

                case 53:
                  return _context6.abrupt('return', body);

                case 54:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee6, _this5, [[31, 36], [42, 47]]);
        }));

        return function (_x7, _x8) {
          return _ref8.apply(this, arguments);
        };
      }());
    }
  }, {
    key: 'setupRecord',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(domain, name) {
        var _this6 = this;

        var type;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.setupDomain(domain);

              case 2:

                if (this._debug) {
                  console.log('> [debug] Setting up record "' + name + '" for "' + domain + '"');
                }

                type = name === '' ? 'ALIAS' : 'CNAME';
                return _context8.abrupt('return', this.retry(function () {
                  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(bail, attempt) {
                    var res, body;
                    return _regenerator2.default.wrap(function _callee7$(_context7) {
                      while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            if (_this6._debug) {
                              console.time('> [debug] /domains/' + domain + '/records #' + attempt);
                            }

                            _context7.next = 3;
                            return _this6._fetch('/domains/' + domain + '/records', {
                              method: 'POST',
                              body: {
                                type: type,
                                name: name === '' ? name : '*',
                                value: 'alias.zeit.co'
                              }
                            });

                          case 3:
                            res = _context7.sent;


                            if (_this6._debug) {
                              console.timeEnd('> [debug] /domains/' + domain + '/records #' + attempt);
                            }

                            if (!(res.status === 403)) {
                              _context7.next = 7;
                              break;
                            }

                            return _context7.abrupt('return', bail(new Error('Unauthorized')));

                          case 7:
                            _context7.next = 9;
                            return res.json();

                          case 9:
                            body = _context7.sent;

                            if (!(res.status !== 200)) {
                              _context7.next = 12;
                              break;
                            }

                            throw new Error(body.error.message);

                          case 12:
                            return _context7.abrupt('return', body);

                          case 13:
                          case 'end':
                            return _context7.stop();
                        }
                      }
                    }, _callee7, _this6);
                  }));

                  return function (_x11, _x12) {
                    return _ref10.apply(this, arguments);
                  };
                }()));

              case 5:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function setupRecord(_x9, _x10) {
        return _ref9.apply(this, arguments);
      }

      return setupRecord;
    }()
  }, {
    key: 'verifyOwnership',
    value: function verifyOwnership(domain) {
      var _this7 = this;

      return this.retry(function () {
        var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(bail) {
          var targets, ips, err, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, ip, _err4;

          return _regenerator2.default.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return (0, _dns2.default)('alias.zeit.co');

                case 2:
                  targets = _context9.sent;

                  if (!(targets.length <= 0)) {
                    _context9.next = 5;
                    break;
                  }

                  return _context9.abrupt('return', bail(new Error('Unable to resolve alias.zeit.co')));

                case 5:
                  ips = [];
                  _context9.prev = 6;
                  _context9.next = 9;
                  return (0, _dns2.default)(domain);

                case 9:
                  ips = _context9.sent;
                  _context9.next = 19;
                  break;

                case 12:
                  _context9.prev = 12;
                  _context9.t0 = _context9['catch'](6);

                  if (!(_context9.t0.code === 'ENODATA' || _context9.t0.code === 'ESERVFAIL' || _context9.t0.code === 'ENOTFOUND')) {
                    _context9.next = 18;
                    break;
                  }

                  // not errors per se, just absence of records
                  if (_this7._debug) {
                    console.log('> [debug] No records found for "' + domain + '"');
                  }
                  _context9.next = 19;
                  break;

                case 18:
                  throw _context9.t0;

                case 19:
                  if (!(ips.length <= 0)) {
                    _context9.next = 23;
                    break;
                  }

                  err = new Error(_errors.DOMAIN_VERIFICATION_ERROR);

                  err.userError = true;
                  return _context9.abrupt('return', bail(err));

                case 23:
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context9.prev = 26;
                  _iterator = (0, _getIterator3.default)(ips);

                case 28:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    _context9.next = 38;
                    break;
                  }

                  ip = _step.value;

                  if (!(targets.indexOf(ip) === -1)) {
                    _context9.next = 35;
                    break;
                  }

                  _err4 = new Error('The domain ' + domain + ' has an A record ' + _chalk2.default.bold(ip) + ' that doesn\'t resolve to ' + _chalk2.default.bold(_chalk2.default.underline('alias.zeit.co')) + '.\n> ' + _errors.DOMAIN_VERIFICATION_ERROR);

                  _err4.ip = ip;
                  _err4.userError = true;
                  return _context9.abrupt('return', bail(_err4));

                case 35:
                  _iteratorNormalCompletion = true;
                  _context9.next = 28;
                  break;

                case 38:
                  _context9.next = 44;
                  break;

                case 40:
                  _context9.prev = 40;
                  _context9.t1 = _context9['catch'](26);
                  _didIteratorError = true;
                  _iteratorError = _context9.t1;

                case 44:
                  _context9.prev = 44;
                  _context9.prev = 45;

                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }

                case 47:
                  _context9.prev = 47;

                  if (!_didIteratorError) {
                    _context9.next = 50;
                    break;
                  }

                  throw _iteratorError;

                case 50:
                  return _context9.finish(47);

                case 51:
                  return _context9.finish(44);

                case 52:
                case 'end':
                  return _context9.stop();
              }
            }
          }, _callee9, _this7, [[6, 12], [26, 40, 44, 52], [45,, 47, 51]]);
        }));

        return function (_x13) {
          return _ref11.apply(this, arguments);
        };
      }());
    }
  }]);
  return Alias;
}(_2.default);

exports.default = Alias;