'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _fsPromise = require('fs-promise');

var _dockerFileParser = require('docker-file-parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var listPackage = {
  version: '0.0.0',
  scripts: {
    start: 'serve ./content'
  },
  dependencies: {
    serve: 'latest'
  }
};

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(path, _ref2) {
    var _this = this;

    var _ref2$deploymentType = _ref2.deploymentType,
        deploymentType = _ref2$deploymentType === undefined ? 'npm' : _ref2$deploymentType,
        deploymentName = _ref2.deploymentName,
        _ref2$quiet = _ref2.quiet,
        quiet = _ref2$quiet === undefined ? false : _ref2$quiet,
        _ref2$isStatic = _ref2.isStatic,
        isStatic = _ref2$isStatic === undefined ? false : _ref2$isStatic;

    var pkg, name, description, e, _e;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pkg = {};
            name = void 0;
            description = void 0;

            if (!(deploymentType === 'npm')) {
              _context2.next = 28;
              break;
            }

            if (!isStatic) {
              _context2.next = 8;
              break;
            }

            pkg = listPackage;
            _context2.next = 20;
            break;

          case 8:
            _context2.prev = 8;
            _context2.next = 11;
            return (0, _fsPromise.readFile)((0, _path.resolve)(path, 'package.json'));

          case 11:
            pkg = _context2.sent;

            pkg = JSON.parse(pkg);
            _context2.next = 20;
            break;

          case 15:
            _context2.prev = 15;
            _context2.t0 = _context2['catch'](8);
            e = Error('Failed to read JSON in "' + path + '/package.json"');

            e.userError = true;
            throw e;

          case 20:
            if (!(!pkg.scripts || !pkg.scripts.start && !pkg.scripts['now-start'])) {
              _context2.next = 24;
              break;
            }

            _e = Error('Missing `start` (or `now-start`) script in `package.json`. ' + 'See: https://docs.npmjs.com/cli/start.');

            _e.userError = true;
            throw _e;

          case 24:

            if (!deploymentName) {
              if (typeof pkg.name === 'string') {
                name = pkg.name;
              } else {
                name = (0, _path.basename)(path);

                if (!quiet && !isStatic) {
                  console.log('> No `name` in `package.json`, using ' + _chalk2.default.bold(name));
                }
              }
            }

            description = pkg.description;
            _context2.next = 30;
            break;

          case 28:
            if (!(deploymentType === 'docker')) {
              _context2.next = 30;
              break;
            }

            return _context2.delegateYield(_regenerator2.default.mark(function _callee() {
              var docker, dockerfile, _e2, _e3, _e4, _e5, labels;

              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      docker = void 0;
                      _context.prev = 1;
                      _context.next = 4;
                      return (0, _fsPromise.readFile)((0, _path.resolve)(path, 'Dockerfile'), 'utf8');

                    case 4:
                      dockerfile = _context.sent;

                      docker = (0, _dockerFileParser.parse)(dockerfile, { includeComments: true });
                      _context.next = 13;
                      break;

                    case 8:
                      _context.prev = 8;
                      _context.t0 = _context['catch'](1);
                      _e2 = Error('Failed to parse "' + path + '/Dockerfile"');

                      _e2.userError = true;
                      throw _e2;

                    case 13:
                      if (!(docker.length <= 0)) {
                        _context.next = 17;
                        break;
                      }

                      _e3 = Error('No commands found in `Dockerfile`');

                      _e3.userError = true;
                      throw _e3;

                    case 17:
                      if (docker.some(function (cmd) {
                        return cmd.name === 'CMD';
                      })) {
                        _context.next = 21;
                        break;
                      }

                      _e4 = Error('No `CMD` found in `Dockerfile`. ' + 'See: https://docs.docker.com/engine/reference/builder/#/cmd');

                      _e4.userError = true;
                      throw _e4;

                    case 21:
                      if (docker.some(function (cmd) {
                        return cmd.name === 'EXPOSE';
                      })) {
                        _context.next = 25;
                        break;
                      }

                      _e5 = Error('No `EXPOSE` found in `Dockerfile`. A port must be supplied. ' + 'See: https://docs.docker.com/engine/reference/builder/#/expose');

                      _e5.userError = true;
                      throw _e5;

                    case 25:
                      labels = {};

                      docker.filter(function (cmd) {
                        return cmd.name === 'LABEL';
                      }).forEach(function (_ref3) {
                        var args = _ref3.args;

                        for (var key in args) {
                          if (!{}.hasOwnProperty.call(args, key)) {
                            continue;
                          }

                          // unescape and convert into string
                          try {
                            labels[key] = JSON.parse(args[key]);
                          } catch (err) {
                            var _e6 = Error('Error parsing value for LABEL ' + key + ' in `Dockerfile`');
                            _e6.userError = true;
                            throw _e6;
                          }
                        }
                      });

                      if (!deploymentName) {
                        if (labels.name) {
                          name = labels.name;
                        } else {
                          name = (0, _path.basename)(path);

                          if (!quiet) {
                            console.log('> No `name` LABEL in `Dockerfile`, using ' + _chalk2.default.bold(name));
                          }
                        }
                      }

                      description = labels.description;

                    case 29:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, _this, [[1, 8]]);
            })(), 't1', 30);

          case 30:

            if (deploymentName) {
              name = deploymentName;
            }

            return _context2.abrupt('return', {
              name: name,
              description: description,
              pkg: pkg
            });

          case 32:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[8, 15]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();