'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromGit = exports.isRepoPath = exports.gitPathParts = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _download = require('download');

var _download2 = _interopRequireDefault(_download);

var _tmpPromise = require('tmp-promise');

var _tmpPromise2 = _interopRequireDefault(_tmpPromise);

var _isUrl = require('is-url');

var _isUrl2 = _interopRequireDefault(_isUrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Packages
var cloneRepo = function cloneRepo(parts, tmpDir) {
  return new _promise2.default(function (resolve, reject) {
    var host = void 0;

    switch (parts.type) {
      case 'GitLab':
        host = 'gitlab.com';
        break;
      case 'Bitbucket':
        host = 'bitbucket.org';
        break;
      default:
        host = 'github.com';
    }

    var url = 'https://' + host + '/' + parts.main;
    var ref = parts.ref || (parts.type === 'Bitbucket' ? 'default' : 'master');
    var cmd = 'git clone ' + url + ' --single-branch ' + ref;

    _child_process2.default.exec(cmd, { cwd: tmpDir.path }, function (err, stdout) {
      if (err) {
        reject(err);
      }

      resolve(stdout);
    });
  });
}; // Native


var renameRepoDir = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(pathParts, tmpDir) {
    var tmpContents, oldTemp, newTemp;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _fsPromise2.default.readdir(tmpDir.path);

          case 2:
            tmpContents = _context.sent;
            oldTemp = _path2.default.join(tmpDir.path, tmpContents[0]);
            newTemp = _path2.default.join(tmpDir.path, pathParts.main.replace('/', '-'));
            _context.next = 7;
            return _fsPromise2.default.rename(oldTemp, newTemp);

          case 7:
            tmpDir.path = newTemp;

            return _context.abrupt('return', tmpDir);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function renameRepoDir(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var downloadRepo = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(repoPath) {
    var pathParts, tmpDir, gitInstalled, url, ref;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pathParts = gitPathParts(repoPath);
            _context2.next = 3;
            return _tmpPromise2.default.dir({
              // We'll remove it manually once deployment is done
              keep: true,
              // Recursively remove directory when calling respective method
              unsafeCleanup: true
            });

          case 3:
            tmpDir = _context2.sent;
            gitInstalled = true;
            _context2.prev = 5;
            _context2.next = 8;
            return cloneRepo(pathParts, tmpDir);

          case 8:
            _context2.next = 13;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](5);

            gitInstalled = false;

          case 13:
            if (!gitInstalled) {
              _context2.next = 17;
              break;
            }

            _context2.next = 16;
            return renameRepoDir(pathParts, tmpDir);

          case 16:
            return _context2.abrupt('return', _context2.sent);

          case 17:
            url = void 0;
            _context2.t1 = pathParts.type;
            _context2.next = _context2.t1 === 'GitLab' ? 21 : _context2.t1 === 'Bitbucket' ? 24 : 26;
            break;

          case 21:
            ref = pathParts.ref ? '?ref=' + pathParts.ref : '';

            url = 'https://gitlab.com/' + pathParts.main + '/repository/archive.tar' + ref;
            return _context2.abrupt('break', 27);

          case 24:
            url = 'https://bitbucket.org/' + pathParts.main + '/get/' + (pathParts.ref || 'default') + '.zip';
            return _context2.abrupt('break', 27);

          case 26:
            url = 'https://api.github.com/repos/' + pathParts.main + '/tarball/' + pathParts.ref;

          case 27:
            _context2.prev = 27;
            _context2.next = 30;
            return (0, _download2.default)(url, tmpDir.path, {
              extract: true
            });

          case 30:
            _context2.next = 36;
            break;

          case 32:
            _context2.prev = 32;
            _context2.t2 = _context2['catch'](27);

            tmpDir.cleanup();
            return _context2.abrupt('return', false);

          case 36:
            _context2.next = 38;
            return renameRepoDir(pathParts, tmpDir);

          case 38:
            return _context2.abrupt('return', _context2.sent);

          case 39:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[5, 10], [27, 32]]);
  }));

  return function downloadRepo(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

var capitalizePlatform = function capitalizePlatform(name) {
  var names = {
    github: 'GitHub',
    gitlab: 'GitLab',
    bitbucket: 'Bitbucket'
  };

  return names[name];
};

var splittedURL = function splittedURL(fullURL) {
  var parsedURL = _url2.default.parse(fullURL);
  var pathParts = parsedURL.path.split('/');

  pathParts.shift();

  // Set path to repo...
  var main = pathParts[0] + '/' + pathParts[1];

  // ...and then remove it from the parts
  pathParts.splice(0, 2);

  // Assign Git reference
  var ref = pathParts.length >= 2 ? pathParts[1] : '';

  // Firstly be sure that we haven know the ref type
  if (pathParts[0]) {
    // Then shorten the SHA of the commit
    if (pathParts[0] === 'commit' || pathParts[0] === 'commits') {
      ref = ref.substring(0, 7);
    }
  }

  // We're deploying master by default,
  // so there's no need to indicate it explicitly
  if (ref === 'master') {
    ref = '';
  }

  return {
    main: main,
    ref: ref,
    type: capitalizePlatform(parsedURL.host.split('.')[0])
  };
};

var gitPathParts = exports.gitPathParts = function gitPathParts(main) {
  var ref = '';

  if ((0, _isUrl2.default)(main)) {
    return splittedURL(main);
  }

  if (main.split('/')[1].includes('#')) {
    var parts = main.split('#');

    ref = parts[1];
    main = parts[0];
  }

  return {
    main: main,
    ref: ref,
    type: capitalizePlatform('github')
  };
};

var isRepoPath = exports.isRepoPath = function isRepoPath(path) {
  if (!path) {
    return false;
  }

  var allowedHosts = ['github.com', 'gitlab.com', 'bitbucket.org'];

  if ((0, _isUrl2.default)(path)) {
    var urlParts = _url2.default.parse(path);
    var slashSplitted = urlParts.path.split('/').filter(function (n) {
      return n;
    });
    var notBare = slashSplitted.length >= 2;

    if (allowedHosts.includes(urlParts.host) && notBare) {
      return true;
    }

    return 'no-valid-url';
  }

  return (/[^\s\\]\/[^\s\\]/g.test(path)
  );
};

var fromGit = exports.fromGit = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(path, debug) {
    var tmpDir;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            tmpDir = false;
            _context3.prev = 1;
            _context3.next = 4;
            return downloadRepo(path);

          case 4:
            tmpDir = _context3.sent;
            _context3.next = 10;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3['catch'](1);

            if (debug) {
              console.log('Could not download "' + path + '" repo from GitHub');
            }

          case 10:
            return _context3.abrupt('return', tmpDir);

          case 11:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined, [[1, 7]]);
  }));

  return function fromGit(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();